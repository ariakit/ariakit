name: App Visual Approvals

on:
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      pr_number:
        description: PR number to update snapshots for
        required: true
        type: string

jobs:
  update-snapshots:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - project: chrome
            os: ubuntu-latest
          - project: firefox
            os: ubuntu-latest
          - project: safari
            os: macos-latest
    # Run on PR comments or manual dispatch
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.issue.pull_request }}
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - run: npm ci
      - run: npx playwright install --with-deps ${{ matrix.project == 'safari' && 'webkit' || matrix.project }}
      - name: Check for approval comment (issue_comment only)
        id: approval
        if: ${{ github.event_name == 'issue_comment' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_EVENT_PATH: ${{ github.event_path }}
          GITHUB_SHA: ${{ github.sha }}
        run: |
          node --experimental-strip-types scripts/ci-comment-site-diffs.ts site-diff-summary.json | tee approval.out
          echo "approved=$(grep -o 'APP_VISUAL_APPROVED=\(true\|false\)' approval.out | cut -d= -f2)" >> $GITHUB_OUTPUT
      - name: Exit if not approved (issue_comment only)
        if: ${{ github.event_name == 'issue_comment' && steps.approval.outputs.approved != 'true' }}
        run: |
          echo "No approval comment found (write 'Approve app visual' in a PR comment)." && exit 0
      - name: Find latest app workflow run for PR
        id: find_run
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
          PR_NUMBER: ${{ github.event_name == 'workflow_dispatch' && inputs.pr_number || github.event.issue.number }}
        run: |
          node -e "const {Octokit}=require('@octokit/rest'); const token=process.env.GITHUB_TOKEN; const [owner,repo]=process.env.GITHUB_REPOSITORY.split('/'); const prNum=Number(process.env.PR_NUMBER); const oct=new Octokit({auth:token}); (async()=>{ const runs=await oct.rest.actions.listWorkflowRuns({owner, repo, workflow_id:'app.yml', event:'pull_request', per_page:50}); const run=runs.data.workflow_runs.find(r=>Array.isArray(r.pull_requests) && r.pull_requests.some(p=>p.number===prNum)); if(!run){ console.log('run_id='); return; } console.log('run_id='+run.id); })().catch(e=>{ console.error(e); process.exitCode=1; });" >> $GITHUB_OUTPUT
      - name: Download diffs artifact
        uses: actions/download-artifact@v4
        if: ${{ steps.find_run.outputs.run_id != '' }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ steps.find_run.outputs.run_id }}
          name: app-visual-diffs-${{ matrix.project }}
          path: downloaded
      - name: Filter failed tests
        run: |
          node -e "const fs=require('node:fs'); const s=JSON.parse(fs.readFileSync('downloaded/site-diff-summary.json','utf8')); const tests=Object.keys(s.byTest||{}); console.log(JSON.stringify(tests.map(t=>t.replace(/-.+$/,''))));" > tests.json
      - name: Update snapshots only for failed tests
        if: ${{ hashFiles('tests.json') != '' }}
        run: |
          TESTS=$(node -e "const list=JSON.parse(require('fs').readFileSync('tests.json','utf8')); process.stdout.write(list.map(t=>`--grep ${t}`).join(' '))")
          npx playwright test -u -c site/playwright.config.ts --project=${{ matrix.project }} $TESTS
      - name: Create PR with updated screenshots
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore(site): update visual snapshots for ${{ matrix.project }}"
          title: "chore(site): update visual snapshots for ${{ matrix.project }}"
          body: "Automated update of site visual snapshots for ${{ matrix.project }}."
          add-paths: |
            site/src/tests/**/__snapshots__/**
