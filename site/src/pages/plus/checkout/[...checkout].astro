---
import { z } from "zod";
import { OrganizationList, SignIn, SignUp } from "@clerk/astro/components";
import { getPlusCheckoutPath } from "#app/lib/url.ts";
import PlusTypeSelector from "#app/components/plus-type-selector.astro";
import PlusCheckoutFrame from "#app/components/plus-checkout-frame.astro";
import { getCurrentUserPlus } from "#app/lib/clerk.ts";
import PlusOffer from "#app/components/plus-offer.astro";
import {
  PlusTypeSchema,
  PlusCheckoutStepSchema,
  type PlusCheckoutStep,
} from "#app/lib/schemas.ts";
import Layout from "./_layout.astro";

export const prerender = false;

const schema = z.tuple([PlusCheckoutStepSchema, PlusTypeSchema]);
const params = schema.safeParse(Astro.params.checkout?.split("/") ?? []);

if (!params.success) {
  return Astro.redirect("/plus");
}

const [step, plusType] = params.data;

const isLoginStep = step === "sign-in" || step === "sign-up";
const isPaymentStep = step === "payment";
const isAfterPaymentStep = step === "success" || step === "team";
const shouldShowProductSelector = isLoginStep || isPaymentStep;

const { userId } = Astro.locals.auth();

if (isLoginStep) {
  if (userId) {
    return Astro.redirect(
      getPlusCheckoutPath({ step: "payment", url: Astro.url })
    );
  }
} else {
  if (!userId) {
    return Astro.redirect(
      getPlusCheckoutPath({ step: "sign-in", url: Astro.url })
    );
  }
  const currentUserPlus = getCurrentUserPlus(Astro);
  const userHasPlusPersonal = currentUserPlus === "personal";
  const userCanCreateTeam = currentUserPlus === "team";

  if (isAfterPaymentStep) {
    if (!currentUserPlus) {
      return Astro.redirect(
        getPlusCheckoutPath({ step: "payment", url: Astro.url })
      );
    }
    if (step === "team" && !userCanCreateTeam) {
      return Astro.redirect(
        getPlusCheckoutPath({ step: "payment", type: "team", url: Astro.url })
      );
    }
  } else if (isPaymentStep && userCanCreateTeam) {
    return Astro.redirect(
      getPlusCheckoutPath({ step: "team", url: Astro.url })
    );
  } else if (isPaymentStep && plusType === "personal" && userHasPlusPersonal) {
    return Astro.redirect(
      getPlusCheckoutPath({ step: "success", url: Astro.url })
    );
  }
}

const LoginComponent =
  step === "sign-in" ? SignIn : step === "sign-up" ? SignUp : null;

function getPath(step: PlusCheckoutStep) {
  return getPlusCheckoutPath({ step, url: Astro.url });
}
---

<Layout>
  <div class="grid md:grid-cols-2 gap-8">
    {
      shouldShowProductSelector && (
        <div>
          <PlusOffer server:defer />
          <PlusTypeSelector url={Astro.url.toString()} />
        </div>
      )
    }
    {
      LoginComponent && (
        <LoginComponent
          signUpUrl={getPath("sign-up")}
          signInUrl={getPath("sign-in")}
          forceRedirectUrl={getPath("payment")}
          signUpForceRedirectUrl={getPath("payment")}
          signInForceRedirectUrl={getPath("payment")}
          appearance={{
            elements: {
              rootBox: { width: "100%" },
              cardBox: { width: "100%" },
            },
          }}
        />
      )
    }
    {
      step === "payment" && (
        <PlusCheckoutFrame
          server:defer
          type={plusType}
          url={Astro.url.toString()}
        >
          <div slot="fallback">Loading...</div>
        </PlusCheckoutFrame>
      )
    }
    {
      step === "team" && (
        <div>
          <h1>Team setup</h1>
          <OrganizationList hidePersonal />
        </div>
      )
    }
    {
      step === "success" && (
        <div data-success-step>
          <h1>Success</h1>
        </div>
      )
    }
  </div>
</Layout>

<script>
  async function runConfetti() {
    const { default: confetti } = await import("canvas-confetti");

    function fire(particleRatio: number, opts: confetti.Options) {
      confetti({
        origin: { y: 1, x: 0.5 },
        disableForReducedMotion: true,
        ...opts,
        particleCount: Math.floor(200 * particleRatio),
      });
    }

    fire(0.25, { spread: 26, startVelocity: 55, scalar: 1.5 });
    fire(0.2, { spread: 60 });
    fire(0.35, { spread: 100, decay: 0.91, scalar: 0.8 });
    fire(0.1, { spread: 120, startVelocity: 25, decay: 0.92, scalar: 1.2 });
    fire(0.1, { spread: 120, startVelocity: 45 });
  }

  if (document.querySelector("[data-success-step]")) {
    runConfetti();
  }
</script>
