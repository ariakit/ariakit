---
/**
 * @license
 * Copyright 2025-present Ariakit FZ-LLC. All Rights Reserved.
 *
 * This software is proprietary. See the license.md file in the root of this
 * package for licensing terms.
 *
 * SPDX-License-Identifier: UNLICENSED
 */
import ContainerRightMenu from "#app/components/container-right-menu.astro";
import ContentAdmonition from "#app/components/content-admonition.astro";
import ContentCodeBlock from "#app/components/content-code-block.astro";
import ContentHeading from "#app/components/content-heading.astro";
import ContentLink from "#app/components/content-link.astro";
import ContentParagraph from "#app/components/content-paragraph.astro";
import ContentSeparator from "#app/components/content-separator.astro";
import Markdown from "#app/components/markdown.astro";
import ReferenceItem from "#app/components/reference-item.astro";
import {
  ReferenceLabel,
  getReferencePlainLabel,
} from "#app/components/reference-label.react.tsx";
import TableOfContents from "#app/components/table-of-contents.astro";
import {
  getPropsParam,
  getReferenceItemId,
  getReferenceSections,
  type ReferenceItemKind,
  type ReferenceSection,
} from "#app/lib/reference.ts";
import type { ReferenceProp } from "#app/lib/schemas.ts";
import { getReferencePath } from "#app/lib/url.ts";
import { invariant } from "@ariakit/core/utils/misc";
import type { GetStaticPaths } from "astro";
import { getCollection } from "astro:content";
import { encode } from "html-entities";

export const partial = true;

export const getStaticPaths = (async () => {
  const references = await getCollection("references");
  return references.flatMap((reference) => {
    const framework = reference.data.framework;

    const getPath = (item?: string) => {
      const path = getReferencePath({ reference, item });
      invariant(
        path,
        `Reference path not found for ${item} in ${reference.id}`
      );
      return `partials${path.replace("/#", "/")}`;
    };

    const data = reference.data;
    const propsParam = getPropsParam(data);
    const params = propsParam?.props || data.params;
    const paramsKind = propsParam ? "prop" : "parameter";

    const mapProps = (prefix: ReferenceItemKind, items?: ReferenceProp[]) => {
      if (!items) return [];
      return items.map((item) => ({
        params: {
          reference: getPath(getReferenceItemId(prefix, item.name)),
        },
        props: {
          framework,
          reference,
          item,
          itemKind: prefix,
          partialMain: false,
        },
      }));
    };

    return [
      {
        params: { reference: getPath() },
        props: { framework, reference, partialMain: false },
      },
      ...mapProps("state", data.state),
      ...mapProps(paramsKind, params),
      ...mapProps("return-prop", data.returnValue?.props),
    ];
  });
}) satisfies GetStaticPaths;

const {
  framework,
  reference,
  partialMain = false,
  item,
  itemKind,
} = Astro.props;

const data = reference.data;
Astro.locals.framework = framework;

interface TocHeading {
  slug: string;
  depth: number;
  text: string;
}

interface Section extends ReferenceSection {
  typeHtml?: string;
}

type ReferenceData = typeof data;

function formatExamplesToHtml(examples: ReferenceData["examples"] = []) {
  return examples.map((example) => ({
    ...example,
    codeHtml: `<code class="language-${example.language}"${example.meta ? ` metastring="${encode(example.meta)}"` : ""}>${encode(example.code)}</code>`,
  }));
}

function getSectionsFromData(data: ReferenceData) {
  const sections = getReferenceSections(data).map((section) => ({
    ...section,
    typeHtml: section.type
      ? `<code class=\"language-typescript\">${section.type}</code>`
      : undefined,
  }));
  return sections;
}

function filterSectionsForPartialMain(
  sections: Section[],
  partialMain: boolean
) {
  if (!partialMain) return sections;
  const firstWithItems = sections.find(
    (s) => (s.items && s.items.length > 0) || s.id === "return-value"
  );
  if (!firstWithItems) return [] as Section[];
  if (firstWithItems.items && firstWithItems.items.length > 0) {
    return [
      {
        ...firstWithItems,
        items: firstWithItems.items.slice(0, 1),
      },
    ];
  }
  return [firstWithItems];
}

function getHeadingsFromSections(sections: Section[]) {
  const entries: TocHeading[] = [];
  for (const section of sections) {
    if (section.id === "return-value") {
      if (section.items && section.items.length > 0) {
        entries.push({ slug: section.id, depth: 2, text: section.title });
        for (const prop of section.items) {
          entries.push({
            slug: getReferenceItemId("return-prop", prop.name),
            depth: 3,
            text: prop.name,
          });
        }
      }
      continue;
    }
    entries.push({ slug: section.id, depth: 2, text: section.title });
    for (const item of section.items || []) {
      const kindForSlug = section.itemKind ?? "prop";
      entries.push({
        slug: getReferenceItemId(kindForSlug, item.name),
        depth: 3,
        text: item.name,
      });
    }
  }
  return entries;
}

function getDeprecationInfo(data: ReferenceData) {
  const isDeprecated = Boolean(data.deprecated);
  const deprecatedMarkdown =
    typeof data.deprecated === "string" ? data.deprecated : undefined;
  return { isDeprecated, deprecatedMarkdown };
}

const kind = data.kind ?? "component";
const name = data.name;
const tocTitle = getReferencePlainLabel(kind, name);
const { isDeprecated, deprecatedMarkdown } = getDeprecationInfo(data);
const description = data.description;
const formattedExamples = formatExamplesToHtml(data.examples);
const sections = getSectionsFromData(data);
const sectionsToRender = filterSectionsForPartialMain(sections, partialMain);
const hasSectionsToRender = sectionsToRender.length > 0;
const headings = getHeadingsFromSections(sections);
const storeStateCodeExamplesHtml = [
  `<code class="language-tsx">const value = Ariakit.useStoreState(store, "key");</code>`,
  `<code class="language-tsx">const derived = Ariakit.useStoreState(store, (state) => state.key);</code>`,
];
---

{
  item ? (
    <ReferenceItem reference={reference} itemKind={itemKind} {...item} />
  ) : (
    <div class="@container">
      {!partialMain && <div id="api" class="scroll-mt-(--header-height)" />}
      <div class="py-8 @default:pt-16">
        <ContainerRightMenu>
          <Fragment slot="prose">
            <ContentHeading as="h3" class="mt-0 mb-8 ak-heading-2">
              <ReferenceLabel symbols kind={kind} set:text={name} />
            </ContentHeading>
          </Fragment>
        </ContainerRightMenu>
        <ContainerRightMenu>
          <Fragment slot="prose">
            {isDeprecated && (
              <ContentAdmonition type="warning" title="Deprecated" class="mb-4">
                {deprecatedMarkdown ? (
                  <Markdown content={deprecatedMarkdown} />
                ) : (
                  ""
                )}
              </ContentAdmonition>
            )}
            <Markdown content={description} />
            {formattedExamples.map((example) => (
              <Fragment>
                {example.description && (
                  <ContentParagraph>{example.description}</ContentParagraph>
                )}
                <ContentCodeBlock set:html={example.codeHtml} />
              </Fragment>
            ))}
            {hasSectionsToRender && (
              <Fragment>
                {sectionsToRender.map((section) => (
                  <Fragment>
                    <ContentHeading
                      as="h4"
                      id={section.id}
                      class="ak-heading-3 mb-0"
                    >
                      <ContentLink href={`#${section.id}`}>
                        {section.title}
                      </ContentLink>
                    </ContentHeading>
                    {section.id === "state" && (
                      <Fragment>
                        <ContentParagraph>
                          {section.description}
                        </ContentParagraph>
                        {storeStateCodeExamplesHtml.map((html) => (
                          <ContentCodeBlock set:html={html} />
                        ))}
                      </Fragment>
                    )}
                    {section.id !== "return-value" && section.items?.length ? (
                      <Fragment>
                        <ContentSeparator />
                        {section.items.map((item) => (
                          <Fragment>
                            <ReferenceItem
                              reference={reference}
                              itemKind={section.itemKind ?? "prop"}
                              {...item}
                            />
                            <ContentSeparator />
                          </Fragment>
                        ))}
                      </Fragment>
                    ) : null}
                    {section.id === "return-value" && (
                      <Fragment>
                        {section.items?.length ? (
                          <Fragment>
                            {section.description && (
                              <Markdown content={section.description} />
                            )}
                            {section.items.map((prop) => (
                              <Fragment>
                                <ContentSeparator />
                                <ReferenceItem
                                  reference={reference}
                                  itemKind="return-prop"
                                  {...prop}
                                />
                              </Fragment>
                            ))}
                          </Fragment>
                        ) : (
                          <Fragment>
                            {section.typeHtml && (
                              <ContentCodeBlock set:html={section.typeHtml} />
                            )}
                            {section.description && (
                              <Markdown content={section.description} />
                            )}
                          </Fragment>
                        )}
                      </Fragment>
                    )}
                  </Fragment>
                ))}
              </Fragment>
            )}
          </Fragment>
          <TableOfContents
            slot="sidebar"
            headings={headings}
            title={tocTitle}
            titleSlug="api"
            inert={partialMain}
            class="sticky [--top:calc(var(--header-height)+--spacing(2))] top-(--top) max-h-[calc(100dvh-var(--top))] overflow-y-auto"
          />
        </ContainerRightMenu>
      </div>
    </div>
  )
}
