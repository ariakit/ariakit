---
import { Icon } from "#app/icons/icon.react.tsx";
import Select from "#app/components/select.astro";
import Layout from "./_layout.astro";

interface Props {
  totalCount: number;
  nextUrl: string | null;
  previousUrl: string | null;
  limit: number;
  offset: number;
  query?: string;
}

const { totalCount, nextUrl, previousUrl, query, limit, offset } = Astro.props;

const cursor = { query, limit, offset };

function getDefaultInputs(exclude: Array<keyof typeof cursor> = []) {
  const keys = Object.keys(cursor) as typeof exclude;
  return keys
    .filter((name) => !exclude.includes(name))
    .map((name) => {
      return { type: "hidden" as const, name, value: cursor[name] };
    });
}
---

<Layout>
  <div class="flex flex-col">
    <div class="sticky top-0 z-1 ak-layer ring ak-layer-current">
      <div class="flex gap-2 ak-container py-2 text-sm ak-layer-current">
        <div class="flex items-center gap-2">
          <div
            class="ak-input ps-2 ak-frame-field/0 ak-dark:scheme-dark"
            onclick="this.querySelector('input[name=q]').focus()"
          >
            <form class="flex gap-2 items-center">
              {getDefaultInputs(["query"]).map((input) => <input {...input} />)}
              <input
                type="text"
                name="query"
                value={query}
                placeholder="Search users"
                autofocus={!!query}
              />
              <button class="ak-button ak-button-square size-8">
                <Icon name="search" strokeWidth={2} />
                <span class="sr-only">Search</span>
              </button>
            </form>
          </div>
          <form>
            {getDefaultInputs(["query"]).map((input) => <input {...input} />)}
            <button class="ak-button ak-layer-pop">Reset</button>
          </form>
        </div>
        <div class="flex gap-2 items-center ak-text/80 ms-auto">
          <div class="border-(--ak-layer-border) border-r px-2">
            {offset + 1} - {Math.min(offset + limit, totalCount)} of{" "}
            {totalCount}
          </div>
          <div class="flex gap-2 items-center">
            Results per page
            <form>
              {getDefaultInputs(["limit"]).map((input) => <input {...input} />)}
              <Select
                name="limit"
                submitOnChange
                options={[
                  { value: 25, selected: limit === 25 },
                  { value: 50, selected: limit === 50 },
                  { value: 100, selected: limit === 100 },
                ]}
              />
            </form>
          </div>
        </div>
        <div class="flex gap-2 items-center">
          <a
            role="link"
            href={previousUrl}
            aria-disabled={!previousUrl}
            class="ak-button ak-layer-pop"
          >
            <Icon name="chevronLeft" aria-label="Previous" />
          </a>
          <div class="tabular-nums">
            {Math.ceil(offset / limit) + 1}/{
              Math.max(Math.ceil(totalCount / limit), Math.ceil(offset / limit))
            }
          </div>
          <a
            role="link"
            href={nextUrl}
            aria-disabled={!nextUrl}
            class="ak-button ak-layer-pop"
          >
            <Icon name="chevronRight" aria-label="Next" />
          </a>
        </div>
      </div>
    </div>
    <div class="ak-layer-down min-h-[90vh]">
      <div class="ak-container ak-container-padding-3">
        <slot />
      </div>
    </div>
  </div>
</Layout>
