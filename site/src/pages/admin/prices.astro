---
import Select from "#app/components/select.astro";
import SubmitButton from "#app/components/submit-button.astro";
import { isAdmin } from "#app/lib/auth.ts";
import { getPrices } from "#app/lib/kv.ts";
import { getPlusPriceKey, parsePlusPriceKey } from "#app/lib/stripe.ts";
import { actions } from "astro:actions";
import Layout from "./_layout.astro";
import PriceCard from "./_price-card.astro";
import { getCurrencyData, processFormRequest } from "./_utils.ts";

export const prerender = false;

if (!(await isAdmin(Astro))) {
  return Astro.redirect("/");
}

const formRequest = processFormRequest(Astro);

if (formRequest) {
  return formRequest;
}

async function getPriceData() {
  const prices = await getPrices(Astro);
  const personalPrices = prices.filter((price) => price.type === "personal");
  return personalPrices.map((personal) => {
    const { countryCode } = parsePlusPriceKey(personal.key);
    const isTeamPrice = (price: typeof personal) => {
      return price.type === "team" && price.currency === personal.currency;
    };
    const teamPrice = prices.find((price) => {
      if (!isTeamPrice(price)) return false;
      return countryCode === parsePlusPriceKey(price.key).countryCode;
    });
    const teamKey = getPlusPriceKey({
      type: "team",
      currency: personal.currency,
      countryCode,
    });
    const team = teamPrice || {
      ...personal,
      type: "team",
      amount: 0,
      key: teamKey,
    };
    return { personal, team, countryCode, teamKey };
  });
}

const prices = await getPriceData();
const { currencies, countries } = getCurrencyData();
---

<Layout>
  <div class="ak-layer-down border-t min-h-[90vh]">
    <ul
      class="ak-container ak-container-padding-3 grid grid-cols-[repeat(auto-fill,minmax(18rem,1fr))] gap-(--ak-container-padding) py-(--ak-container-padding)"
    >
      {prices.map((price) => <PriceCard {...price} />)}
      <li class="ak-layer ak-frame-card ak-frame-border">
        <form
          method="post"
          action={actions.admin.setPrice}
          class="flex flex-col h-full"
        >
          <div
            class="flex gap-2 justify-between ak-layer-current border-b ak-frame-cover/1 text-sm"
          >
            <Select
              name="currency"
              options={currencies.map((currency) => ({
                label: `${currency.symbol} ${currency.code}`,
                value: currency.code,
              }))}
            />
            <Select
              name="countryCode"
              options={[{ label: "ðŸŒŽ Anywhere", value: "" }].concat(
                ...countries.map((country) => ({
                  label: `${country.flag} ${country.name}`,
                  value: country.code,
                }))
              )}
            />
          </div>
          <input name="type" type="hidden" value="personal" />
          <div
            class="ak-frame-cover/4 flex-1 py-0 flex items-center justify-center"
          >
            <input
              type="text"
              aria-label="Price"
              inputmode="decimal"
              class="ak-input field-sizing-content"
              name="amount"
              placeholder="0.00"
              required
              autocomplete="off"
              pattern="^\\d+(\\.\\d{1,2})?$"
              title="Enter a number with up to 2 decimal places"
            />
          </div>
          <div class="ak-frame-cover/1 mt-auto">
            <SubmitButton class="ak-button ak-layer-pop w-full"
              >Set price</SubmitButton
            >
          </div>
        </form>
      </li>
    </ul>
  </div>
</Layout>
