---
/**
 * @license
 * Copyright 2025-present Ariakit FZ-LLC. All Rights Reserved.
 *
 * This software is proprietary. See the license.md file in the root of this
 * package for licensing terms.
 *
 * SPDX-License-Identifier: UNLICENSED
 */
import { components } from "#app/components/content-components.astro";
import Meta from "#app/components/meta.astro";
import SidebarMenu from "#app/components/sidebar-menu.astro";
import TableOfContents from "#app/components/table-of-contents.astro";
import { filterGuidesByGroup, getGuideDetail } from "#app/lib/content.ts";
import Layout from "#app/pages/_layout.astro";
import type { GetStaticPaths } from "astro";
import { getCollection, render } from "astro:content";

export const getStaticPaths = (async () => {
  const entries = await getCollection("guides");
  return entries.flatMap((entry) => {
    const { path, framework, groupLabel, groupPath, type } =
      getGuideDetail(entry);
    return {
      params: { guide: path },
      props: { entry, framework, groupLabel, groupPath, type },
    };
  });
}) satisfies GetStaticPaths;

const { entry, groupLabel, groupPath, framework, type } = Astro.props;
const { Content, headings } = await render(entry);

const guides = (
  await getCollection("guides", filterGuidesByGroup(groupPath))
).map(getGuideDetail);

if (framework) {
  Astro.locals.framework = framework;
}

const title = entry.data.title;
---

<Layout {title} headerBorder {headings}>
  <Meta
    slot="meta"
    id={entry.id}
    {framework}
    {type}
    {title}
    description={entry.data.description}
  />
  <div
    class:list={[
      "overflow-x-clip ak-layer-current @5xl:grid content-start",
      "[--sidebar-menu-width:max(14rem,calc(100%-min(100%,var(--container-default)+var(--ak-container-p)*2))/2)]",
      "grid-cols-[var(--sidebar-menu-width)_min(calc(100%-var(--sidebar-menu-width)),calc(var(--container-wide)---spacing(2)))]",
    ]}
  >
    <SidebarMenu
      items={[
        { label: groupLabel, href: `${groupPath}/#tags` },
        { label: "Guides" },
        ...guides.map((guide) => ({
          label: guide.data.title,
          href: guide.path,
        })),
      ]}
    />
    <div data-content="true" class="ak-layer-current border-s">
      <div class="@container min-h-[200dvh]">
        <div
          class="flex flex-col gap-16 @max-3xl:[--container-sidebar:0] @7xl:[--container-p:--spacing(14)] @5xl:[--container-p:--spacing(8)] @3xl:[--container-p:--spacing(6)] [--container-p:--spacing(3)]"
        >
          <div
            class="ak-container-size-[calc(100cqi-var(--ak-container-p)*2-var(--container-sidebar))]/0 ak-container ms-0 pt-18"
          >
            <div
              class="ak-container-size-content/(--container-p) ak-container flex flex-col gap-4"
            >
              <h1 class="text-4xl font-semibold">{entry.data.title}</h1>
              <div class="ak-text/60 text-lg">{entry.data.description}</div>
            </div>
          </div>
          <div class="grid @3xl:grid-cols-[1fr_var(--container-sidebar)]">
            <div
              class="ak-prose @3xl:ak-container-size-[calc(100cqi-var(--container-sidebar))]/(--container-p) ak-container @5xl:ak-prose-text-lg/relaxed flex flex-col"
            >
              <Content {framework} {components} />
            </div>
            <div class="hidden @3xl:block pe-(--container-p)">
              <TableOfContents
                {headings}
                title={entry.data.title}
                class="sticky top-[calc(var(--header-height)+--spacing(8))] max-h-[calc(100dvh---spacing(25))] overflow-y-auto"
              />
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>
