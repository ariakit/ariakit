---
/**
 * @license
 * Copyright 2025-present Ariakit FZ-LLC. All Rights Reserved.
 *
 * This software is proprietary. See the license.md file in the root of this
 * package for licensing terms.
 *
 * SPDX-License-Identifier: UNLICENSED
 */
import {
  BoxPatternsLeftOnly,
  BoxPatternsRightOnly,
} from "#app/components/box-patterns.react.tsx";
import ChipLinkList from "#app/components/chip-link-list.astro";
import ChipLink from "#app/components/chip-link.astro";
import ContainerLeftMenu from "#app/components/container-left-menu.astro";
import ContainerRightMenu from "#app/components/container-right-menu.astro";
import { components } from "#app/components/content-components.astro";
import ContentHeading from "#app/components/content-heading.astro";
import ContentLink from "#app/components/content-link.astro";
import ContentParagraph from "#app/components/content-paragraph.astro";
import HorizontalScroll from "#app/components/horizontal-scroll.astro";
import Meta from "#app/components/meta.astro";
import PageCardExample from "#app/components/page-card-example.astro";
import ReferenceContent from "#app/components/reference-content.astro";
import { ReferenceLabel } from "#app/components/reference-label.react.tsx";
import type { SidebarMenuItem } from "#app/components/sidebar-menu.astro";
import SidebarMenu from "#app/components/sidebar-menu.astro";
import TableOfContents from "#app/components/table-of-contents.astro";
import TimelineAnchor from "#app/components/timeline-anchor.astro";
import TimelineAnimate from "#app/components/timeline-animate.astro";
import { Icon } from "#app/icons/icon.react.tsx";
import { descriptionToText } from "#app/lib/content.ts";
import { rehypeAsTagName } from "#app/lib/rehype.ts";
import { trimRight } from "#app/lib/string.ts";
import { mapTags } from "#app/lib/tags.ts";
import { getReferencePath } from "#app/lib/url.ts";
import Layout from "#app/pages/_layout.astro";
import { createMarkdownProcessor } from "@astrojs/markdown-remark";
import type { GetStaticPaths } from "astro";
import { getCollection, render } from "astro:content";

export const getStaticPaths = (async () => {
  const entries = await getCollection("components");
  const descriptions = await getCollection("descriptions");
  const galleries = await getCollection("galleries");
  const examples = await getCollection("examples");
  const references = await getCollection("references");
  return entries.flatMap((entry) => {
    const id = `${entry.id}/_component`;
    const gallery = galleries.find((gallery) => gallery.id === id);
    const description = descriptions.find((header) => header.id === id);
    const componentExamples = examples.filter((example) =>
      example.data.components.some((component) => component.id === entry.id)
    );
    return entry.data.frameworks.flatMap((framework) => {
      const prefix = `${framework}/${entry.id}/`;
      const componentReferences = references.filter((reference) =>
        reference.id.startsWith(prefix)
      );
      const reference = componentReferences.find((reference) => {
        return reference.data.kind === "component";
      });
      const props = {
        framework,
        entry,
        gallery,
        description,
        examples: componentExamples,
        references: componentReferences,
        reference,
        main: true,
      } as const;
      const component = `${framework}/components/${entry.id}`;
      const main = {
        params: { component: component },
        props,
      };
      return [
        main,
        ...componentReferences.map((reference) => {
          const slug = reference.id.replace(prefix, "");
          return {
            params: { component: `${component}/${slug}` },
            props: { ...props, reference, main: false },
          };
        }),
      ];
    });
  });
}) satisfies GetStaticPaths;

const {
  framework,
  entry,
  gallery,
  description,
  examples,
  references,
  reference,
  main,
} = Astro.props;
const { Content, headings } = await render(entry);
const { Content: Gallery } = gallery ? await render(gallery) : {};
const { Content: Description } = description ? await render(description) : {};

Astro.locals.framework = framework;

headings.unshift(
  { slug: "examples", text: "Examples", depth: 2 },
  { slug: "api", text: "API Reference", depth: 2 }
);

const tags = mapTags(entry.data.tags, [framework]);
const title = entry.data.title;
const descriptionText = await descriptionToText(
  Description,
  framework,
  components
);

// Build href to the full API reference page for the default reference
const referenceHref = reference && `${getReferencePath({ reference })}#api`;

function getFunctions() {
  return references.filter(
    (ref) => ref.data.kind === "function" || ref.data.kind === "store"
  );
}

function getComponents() {
  return references.filter((ref) => ref.data.kind === "component");
}

function getMenu(
  references: ReturnType<typeof getFunctions> | ReturnType<typeof getComponents>
) {
  return references.map((reference) => {
    return {
      label: reference.data.name,
      href: `${getReferencePath({ reference })}#api`,
      kind: reference.data.kind,
      symbols: true,
    } satisfies SidebarMenuItem;
  });
}

const functionsMenu = getFunctions();
const componentsMenu = getComponents();

const referenceMenu = [
  ...(functionsMenu.length ? [{ label: "Functions" }] : []),
  ...getMenu(functionsMenu),
  ...(componentsMenu.length ? [{ label: "Components" }] : []),
  ...getMenu(componentsMenu),
];

function isLinkItem(
  item: SidebarMenuItem
): item is Extract<SidebarMenuItem, { href: string; label: string }> {
  return "href" in item;
}

function getReferenceProps(item: SidebarMenuItem) {
  if (!("kind" in item) || item.kind === undefined) return;
  const { href: _href, ...referenceProps } = item as any;
  return referenceProps;
}

const apiLinks = referenceMenu.filter(isLinkItem);

function isCurrentHref(href: string, pathname = Astro.url.pathname) {
  const url = new URL(href, Astro.url.origin);
  return trimRight(pathname, "/") === trimRight(url.pathname, "/");
}

// TODO: This should be a singleton.
const processor = await createMarkdownProcessor({
  syntaxHighlight: false,
  rehypePlugins: [
    [
      rehypeAsTagName,
      { tags: ["h1", "h2", "h3", "h4", "h5", "h6", "ul", "ol"] },
    ],
  ],
});

async function parseDescription(description: string) {
  const result = await processor.render(description);
  return result.code;
}
---

<Layout title={title}>
  <Meta
    slot="meta"
    id={entry.id}
    type="components"
    title={title}
    framework={framework}
    description={descriptionText}
  />

  <div class="overflow-x-clip">
    <div class="ak-container-size-default ak-container py-24">
      <h1
        class="text-4xl font-semibold mb-5 ak-container-size-default/0 ak-container relative"
      >
        {entry.data.title}
        <BoxPatternsLeftOnly />
      </h1>
      <div
        class="grid @3xl:grid-cols-[1fr_var(--container-sidebar)] gap-3 items-start"
      >
        <div
          class="text-lg ak-container-size-content/0 ak-container flex flex-col gap-5"
        >
          {
            Description && (
              <div class="ak-text/60 ak-prose-elements text-lg/[1.8] [&_code]:ak-text/60 relative">
                <Description {framework} {components} />
                <BoxPatternsRightOnly />
              </div>
            )
          }
          {
            !!tags.length && (
              <ul class="flex gap-2">
                {tags.map((tag) => (
                  <li>
                    <a
                      href={`/${framework}/components/${tag.id}`}
                      class="ak-badge ak-button ak-layer-pop"
                    >
                      {tag.label}
                    </a>
                  </li>
                ))}
              </ul>
            )
          }
        </div>
      </div>
    </div>
  </div>
  <div
    data-gallery="true"
    class="ak-container-size-wider ak-container flex flex-col gap-12 mb-24"
  >
    {Gallery && <Gallery {framework} {components} />}
  </div>
  {
    !!examples.length && (
      <div class="ak-prose ak-prose-text-base/relaxed @5xl:ak-prose-text-lg/loose ak-container-size-wider ak-container mb-24">
        <div class="grid @3xl:grid-cols-[1fr_var(--container-sidebar)]">
          <ContentHeading as="h2" id="examples">
            <ContentLink href="#examples">Examples</ContentLink>
          </ContentHeading>
          <div />
          <ContentParagraph class="ak-text/0 mb-2">
            Learn <strong>{entry.data.title}</strong> by exploring these
            real-world examples.
          </ContentParagraph>
        </div>
        <div
          class:list={[
            "grid grid-cols-[repeat(auto-fill,minmax(16rem,1fr))] gap-4 ak-container",
            // "ak-container-size-wider/0",
            "ak-container-size-default/0",
          ]}
        >
          {[
            ...examples,
            // ...examples,
            // ...examples,
            // ...examples,
            // ...examples,
            // ...examples,
            // ...examples,
          ].map((example) => (
            <PageCardExample entry={example} />
          ))}
        </div>
      </div>
    )
  }
  {
    reference && (
      <div class="relative mb-24 [--scroll-mt:calc(var(--header-height)-1px)]">
        {!main && <TimelineAnchor name="anchor" />}
        <div
          class:list={[
            "border-b ak-layer-current flex items-center h-14",
            !main &&
              "sticky top-(--scroll-mt) z-4 [&~*]:[--header-height:calc(var(--scroll-mt)+--spacing(14))]",
          ]}
        >
          <ContainerRightMenu
            keepSidebar
            class="ak-container-size-wider ak-container items-center"
          >
            <div class="ak-prose ak-prose-text-base/relaxed @5xl:ak-prose-text-lg/loose">
              <TimelineAnimate
                as="h2"
                id={main ? `api` : undefined}
                enabled={!main}
                anchor="anchor"
                rangeStart="exit calc(var(--scroll-mt) * -3)"
                rangeEnd="exit calc(var(--scroll-mt) * -1)"
                keyframes={`to { font-size: 1.25rem; margin-bottom: 0; }`}
                class="mb-[1em] ak-heading-2 relative ak-container ak-container-size-content/0 scroll-mt-[calc(var(--header-height)+1em)]"
              >
                <ContentLink href="#api">API Reference</ContentLink>
              </TimelineAnimate>
            </div>
            {!main && (
              <TimelineAnimate
                slot="sidebar"
                as="a"
                anchor="anchor"
                rangeStart="exit calc(var(--scroll-mt) * -3)"
                rangeEnd="exit calc(var(--scroll-mt) * -1)"
                keyframes={`from { opacity: 0; display: none; margin-bottom: 1.5rem; }`}
                href={`/${framework}/components/${entry.id}/#api`}
                class="ak-button text-sm ak-text-primary ms-3 justify-self-start"
              >
                <span>
                  Collapse<span class="@max-3xl:sr-only"> API Reference</span>
                </span>
                <Icon name="arrowUp" className="ak-text/0" />
              </TimelineAnimate>
            )}
          </ContainerRightMenu>
        </div>
        <div
          class:list={[
            "@5xl:hidden ak-layer-current border-b",
            "h-12 flex items-center",
            !main &&
              "sticky top-(--header-height) z-4 @max-5xl:[&~*]:[--header-height:calc(var(--scroll-mt)+--spacing(14)+--spacing(12))]",
          ]}
        >
          <button
            aria-label="Search API Reference"
            class="ak-button ak-frame-none/1 ak-layer-current size-12 aspect-square border-e"
          >
            <Icon name="search" className="text-base" />
          </button>
          <HorizontalScroll
            id="api-reference-menu-mobile"
            class="h-full grid items-center"
          >
            <ChipLinkList>
              {apiLinks.map((item) => {
                const referenceProps = getReferenceProps(item);
                return (
                  <li>
                    <ChipLink
                      href={item.href}
                      current={isCurrentHref(item.href)}
                    >
                      {referenceProps?.kind ? (
                        <ReferenceLabel
                          {...referenceProps}
                          set:text={item.label}
                        />
                      ) : (
                        item.label
                      )}
                    </ChipLink>
                  </li>
                );
              })}
            </ChipLinkList>
          </HorizontalScroll>
        </div>

        <div
          class:list={[
            "ak-layer-current border-b",
            main &&
              "max-h-[min(28rem,calc(100dvh-var(--scroll-mt)-8rem))] overflow-clip has-[[data-expand]:hover]:ak-layer-pop-0.5",
          ]}
        >
          <ContainerLeftMenu>
            <SidebarMenu id="api-reference-menu" items={referenceMenu}>
              <div slot="before" class="p-2">
                <button class="ak-input ak-edge/15 ak-frame-field/2 flex h-10 gap-2 items-center text-start w-full text-sm">
                  <div class="flex items-center gap-2 flex-grow min-w-0 ak-frame/1">
                    <Icon name="search" strokeWidth={2} className="flex-none" />
                    <div class="ak-input-placeholder truncate">
                      Search API Reference
                    </div>
                  </div>
                  <kbd class="ak-kbd grid place-items-center aspect-square h-full">
                    <Icon name="chevronLeft" aria-label="<" />
                  </kbd>
                </button>
              </div>
            </SidebarMenu>
            <div
              data-content="true"
              class:list={["ak-layer-current relative max-h-[inherit]"]}
            >
              <div
                inert={main ? "" : undefined}
                class:list={[main && "opacity-70"]}
              >
                <ReferenceContent reference={reference} inert={main} />
              </div>
              {main && referenceHref && (
                <a
                  data-expand="true"
                  href={referenceHref}
                  class="absolute group/expand outline-none inset-0 ak-layer-current bg-transparent bg-gradient-to-b from-transparent from-20% to-[calc(100%-2rem)] to-(--ak-layer) z-2"
                >
                  <ContainerRightMenu
                    as="span"
                    class="absolute inset-0 py-2 grid justify-items-center items-end"
                  >
                    <span class="ak-button ak-layer-current text-sm hover:ak-layer-hover group-focus-visible/expand:ak-button_focus group-active/expand:ak-button_active">
                      Expand API Reference
                      <Icon className="text-base" name="chevronDown" />
                    </span>
                  </ContainerRightMenu>
                </a>
              )}
            </div>
          </ContainerLeftMenu>
        </div>
      </div>
    )
  }
  <div data-content="true" class="ak-container-size-wider ak-container">
    <ContainerRightMenu>
      <div
        class="ak-prose ak-prose-text-base/relaxed @5xl:ak-prose-text-lg/loose"
      >
        <Content framework={framework} components={components} />
      </div>
      <TableOfContents
        slot="sidebar"
        title={entry.data.title}
        headings={headings}
        class="sticky [--top:calc(var(--header-height)+--spacing(8))] top-(--top) max-h-[calc(100dvh-var(--top))] overflow-y-auto"
      />
    </ContainerRightMenu>
  </div>
</Layout>
