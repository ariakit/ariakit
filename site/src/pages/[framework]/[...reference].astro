---
/**
 * @license
 * Copyright 2025-present Ariakit FZ-LLC. All Rights Reserved.
 *
 * This software is proprietary. See the license.md file in the root of this
 * package for licensing terms.
 *
 * SPDX-License-Identifier: UNLICENSED
 */
import { ApiReferenceLabel } from "#app/components/api-reference-label.react.tsx";
import ApiReferenceProp from "#app/components/api-reference-prop.astro";
import ContainerRightMenu from "#app/components/container-right-menu.astro";
import ContentAdmonition from "#app/components/content-admonition.astro";
import ContentCodeBlock from "#app/components/content-code-block.astro";
import ContentHeading from "#app/components/content-heading.astro";
import ContentParagraph from "#app/components/content-paragraph.astro";
import ContentSeparator from "#app/components/content-separator.astro";
import Markdown from "#app/components/markdown.astro";
import TableOfContents from "#app/components/table-of-contents.astro";
import type { GetStaticPaths } from "astro";
import { getCollection } from "astro:content";
import { encode } from "html-entities";

export const getStaticPaths = (async () => {
  const references = await getCollection("references");
  return references.map((reference) => {
    const framework = reference.data.framework;
    const componentId = reference.data.componentId;
    const prefix = `${framework}/${componentId}/`;
    const slug = reference.id.replace(prefix, "");
    const path = `components/${componentId}/${slug}/partial`;
    return {
      params: { framework, reference: path },
      props: { reference },
    };
  });
}) satisfies GetStaticPaths;

const { reference } = Astro.props;

// Extract all headings including prop names for table of contents
const extractHeadings = () => {
  const headings: Array<{ slug: string; depth: number; text: string }> = [];

  // Add main sections
  if (reference.data.state && reference.data.state.length > 0) {
    headings.push({ slug: "state", depth: 2, text: "State" });
    reference.data.state.forEach((prop) => {
      headings.push({ slug: `state-${prop.name}`, depth: 3, text: prop.name });
    });
  }

  // Props sections
  if (
    reference.data.params.length === 1 &&
    reference.data.params[0]?.name === "props" &&
    reference.data.params[0]?.props
  ) {
    const props = reference.data.params[0].props;
    const requiredProps = props.filter((prop) => !prop.optional);
    const optionalProps = props.filter((prop) => prop.optional);

    if (requiredProps.length > 0) {
      headings.push({
        slug: "required-props",
        depth: 2,
        text: "Required Props",
      });
      requiredProps.forEach((prop) => {
        headings.push({
          slug: `required-prop-${prop.name}`,
          depth: 3,
          text: prop.name,
        });
      });
    }

    if (optionalProps.length > 0) {
      headings.push({
        slug: "optional-props",
        depth: 2,
        text: "Optional Props",
      });
      optionalProps.forEach((prop) => {
        headings.push({
          slug: `optional-prop-${prop.name}`,
          depth: 3,
          text: prop.name,
        });
      });
    }
  }

  // Parameters section
  if (
    reference.data.params.length > 0 &&
    !(
      reference.data.params.length === 1 &&
      reference.data.params[0]?.name === "props"
    )
  ) {
    headings.push({ slug: "parameters", depth: 2, text: "Parameters" });
    reference.data.params.forEach((param) => {
      headings.push({
        slug: `parameter-${param.name}`,
        depth: 3,
        text: param.name,
      });
    });
  }

  // Return Value section
  if (reference.data.returnValue) {
    headings.push({ slug: "return-value", depth: 2, text: "Return Value" });
    if (
      reference.data.returnValue.props &&
      reference.data.returnValue.props.length > 0
    ) {
      const props = reference.data.returnValue.props;
      const requiredProps = props.filter((prop) => !prop.optional);
      const optionalProps = props.filter((prop) => prop.optional);

      if (requiredProps.length > 0) {
        headings.push({
          slug: "return-required-properties",
          depth: 3,
          text: "Required Properties",
        });
        requiredProps.forEach((prop) => {
          headings.push({
            slug: `return-required-prop-${prop.name}`,
            depth: 4,
            text: prop.name,
          });
        });
      }

      if (optionalProps.length > 0) {
        headings.push({
          slug: "return-optional-properties",
          depth: 3,
          text: "Optional Properties",
        });
        optionalProps.forEach((prop) => {
          headings.push({
            slug: `return-optional-prop-${prop.name}`,
            depth: 4,
            text: prop.name,
          });
        });
      }
    }
  }

  return headings;
};

const headings = extractHeadings();

export const partial = true;
---

<div class="@container">
  <ContainerRightMenu>
    <Fragment slot="prose">
      <ContentHeading as="h3" class="my-8 ak-heading-2 @default:mt-16">
        <ApiReferenceLabel
          symbols
          kind={reference.data.kind ?? "component"}
          set:text={reference.data.name}
        />
      </ContentHeading>
    </Fragment>
  </ContainerRightMenu>
  <ContainerRightMenu>
    <Fragment slot="prose">
      {
        reference.data.deprecated && (
          <ContentAdmonition type="warning" title="Deprecated" class="mb-4">
            {typeof reference.data.deprecated === "string" ? (
              <Markdown content={reference.data.deprecated} />
            ) : (
              ""
            )}
          </ContentAdmonition>
        )
      }
      <Markdown content={reference.data.description} />
      {
        reference.data.examples.map((example) => (
          <Fragment>
            {example.description && (
              <ContentParagraph>{example.description}</ContentParagraph>
            )}
            <ContentCodeBlock
              set:html={`<code class="language-${example.language}"${example.meta ? ` metastring="${encode(example.meta)}"` : ""}>${encode(example.code)}</code>`}
            />
          </Fragment>
        ))
      }

      {/* State Section */}
      {
        reference.data.state && reference.data.state.length > 0 && (
          <Fragment>
            <ContentHeading as="h2" id="state">
              State
            </ContentHeading>
            <ContentParagraph>
              The state properties available for this store.
            </ContentParagraph>
            {reference.data.state.map((prop) => (
              <Fragment>
                <ContentSeparator />
                <ApiReferenceProp prefix="state" {...prop} />
              </Fragment>
            ))}
          </Fragment>
        )
      }

      {/* Props Sections */}
      {
        reference.data.params.length === 1 &&
          reference.data.params[0]?.name === "props" &&
          reference.data.params[0]?.props && (
            <Fragment>
              {(() => {
                const props = reference.data.params[0]?.props;
                if (!props) return null;
                const requiredProps = props.filter((prop) => !prop.optional);
                const optionalProps = props.filter((prop) => prop.optional);
                return (
                  <Fragment>
                    {/* Required Props */}
                    {requiredProps.length > 0 && (
                      <Fragment>
                        <ContentHeading as="h2" id="required-props">
                          Required Props
                        </ContentHeading>
                        {requiredProps.map((prop) => (
                          <Fragment>
                            <ContentSeparator />
                            <ApiReferenceProp prefix="required" {...prop} />
                          </Fragment>
                        ))}
                      </Fragment>
                    )}

                    {/* Optional Props */}
                    {optionalProps.length > 0 && (
                      <Fragment>
                        <ContentHeading
                          as="h4"
                          id="optional-props"
                          class="ak-heading-3!"
                        >
                          Optional Props
                        </ContentHeading>
                        {optionalProps.map((prop) => (
                          <Fragment>
                            <ContentSeparator />
                            <ApiReferenceProp prefix="optional" {...prop} />
                          </Fragment>
                        ))}
                      </Fragment>
                    )}
                  </Fragment>
                );
              })()}
            </Fragment>
          )
      }

      {/* Parameters Section */}
      {
        reference.data.params.length > 0 &&
          !(
            reference.data.params.length === 1 &&
            reference.data.params[0]?.name === "props"
          ) && (
            <Fragment>
              <ContentHeading as="h2" id="parameters">
                Parameters
              </ContentHeading>
              {reference.data.params.map((param) => (
                <Fragment>
                  <ContentHeading as="h3" id={`parameter-${param.name}`}>
                    {param.name}
                    {!param.optional && (
                      <span class="text-red-500 ml-1">*</span>
                    )}
                  </ContentHeading>
                  <ContentCodeBlock
                    set:html={`<code class="language-typescript">${param.type}</code>`}
                  />
                  <Markdown content={param.description} />
                  {param.defaultValue && (
                    <ContentParagraph>
                      <strong>Default:</strong>{" "}
                      <code>{param.defaultValue}</code>
                    </ContentParagraph>
                  )}
                  {param.deprecated && (
                    <ContentAdmonition type="warning" title="Deprecated">
                      {typeof param.deprecated === "string" ? (
                        <Markdown content={param.deprecated} />
                      ) : (
                        ""
                      )}
                    </ContentAdmonition>
                  )}
                </Fragment>
              ))}
            </Fragment>
          )
      }

      {/* Return Value Section */}
      {
        reference.data.returnValue && (
          <Fragment>
            <ContentHeading as="h2" id="return-value">
              Return Value
            </ContentHeading>
            <ContentCodeBlock
              set:html={`<code class="language-typescript">${reference.data.returnValue.type}</code>`}
            />
            {/* <Markdown content={reference.data.returnValue.description} /> */}

            {/* Return Value Props */}
            {reference.data.returnValue.props &&
              reference.data.returnValue.props.length > 0 && (
                <Fragment>
                  {(() => {
                    const props = reference.data.returnValue.props;
                    const requiredProps = props.filter(
                      (prop) => !prop.optional
                    );
                    const optionalProps = props.filter((prop) => prop.optional);
                    return (
                      <Fragment>
                        {/* Required Return Value Props */}
                        {requiredProps.length > 0 && (
                          <Fragment>
                            <ContentHeading
                              as="h3"
                              id="return-required-properties"
                            >
                              Required Properties
                            </ContentHeading>
                            {requiredProps.map((prop) => (
                              <Fragment>
                                <ContentSeparator />
                                <ApiReferenceProp prefix="return" {...prop} />
                              </Fragment>
                            ))}
                          </Fragment>
                        )}

                        {/* Optional Return Value Props */}
                        {optionalProps.length > 0 && (
                          <Fragment>
                            <ContentHeading
                              as="h3"
                              id="return-optional-properties"
                            >
                              Optional Properties
                            </ContentHeading>
                            {optionalProps.map((prop) => (
                              <Fragment>
                                <ContentSeparator />
                                <ApiReferenceProp prefix="return" {...prop} />
                              </Fragment>
                            ))}
                          </Fragment>
                        )}
                      </Fragment>
                    );
                  })()}
                </Fragment>
              )}
          </Fragment>
        )
      }
    </Fragment>
    <TableOfContents
      slot="toc"
      headings={headings}
      title={reference.data.name}
      class="sticky [--top:calc(var(--header-height)+--spacing(8))] top-(--top) max-h-[calc(100dvh-var(--top))] overflow-y-auto"
    />
  </ContainerRightMenu>
</div>
