---
/**
 * @license
 * Copyright 2025-present Ariakit FZ-LLC. All Rights Reserved.
 *
 * This software is proprietary. See the license.md file in the root of this
 * package for licensing terms.
 *
 * SPDX-License-Identifier: UNLICENSED
 */
import { type CollectionEntry, getCollection } from "astro:content";
import type { GetStaticPaths } from "astro";
import { mapTags } from "#app/lib/tags.ts";
import Layout from "#app/pages/_layout.astro";
import PageCard from "#app/components/page-card.astro";
import HorizontalScroll from "#app/components/horizontal-scroll.astro";
import { Icon } from "#app/icons/icon.react.tsx";
import { getFramework } from "#app/lib/frameworks.ts";
import { BoxPatternsMiddle } from "#app/components/box-patterns.react.tsx";
import SidebarMenu from "#app/components/sidebar-menu.astro";
import {
  filterGuidesByGroup,
  getGuideDetail,
  getGalleryLength,
} from "#app/lib/content.ts";
import { uniq } from "#app/lib/array.ts";
import Meta from "#app/components/meta.astro";

export const getStaticPaths = (async () => {
  const allExamples = await getCollection("examples");
  const allGalleries = await getCollection("galleries");

  const types = [
    {
      singular: "component",
      plural: "components",
      capitalSingular: "Component",
      capitalPlural: "Components",
    },
    {
      singular: "example",
      plural: "examples",
      capitalSingular: "Example",
      capitalPlural: "Examples",
    },
  ];

  const frameworks = uniq(
    allExamples.flatMap((entry) => entry.data.frameworks)
  );

  return frameworks.flatMap((framework) => {
    return types.flatMap((type) => {
      const frameworkExamples = allExamples
        .filter((example) => {
          if (!example.data.frameworks.includes(framework)) return false;
          if (type.singular === "component") {
            return example.data.component;
          }
          return !example.data.component;
        })
        .sort((a, b) => a.data.title.localeCompare(b.data.title));

      const frameworkExampleIds = frameworkExamples.map((e) => e.id);
      const galleries = allGalleries.filter((gallery) =>
        frameworkExampleIds.includes(gallery.id)
      );

      const frameworkTags = mapTags(
        frameworkExamples.flatMap((example) => example.data.tags),
        [framework]
      );

      const frameworkLength = getGalleryLength(frameworkExamples, galleries);

      const tagsWithLength = frameworkTags.map((tag) => {
        const tagExamples = frameworkExamples.filter(
          (example) => !!example.data.tags.find((t) => t === tag?.id)
        );
        const tagLength = tagExamples.reduce((acc, example) => {
          const gallery = galleries.find((g) => g.id === example.id);
          return acc + (gallery?.data.length || 1);
        }, 0);
        return { ...tag, length: tagLength };
      });

      return [null, ...frameworkTags].map((tag) => {
        const tagExamples = !tag
          ? frameworkExamples
          : frameworkExamples.filter(
              (example) => !!example.data.tags.find((t) => t === tag?.id)
            );

        const index = tag ? `${type.plural}/${tag.id}` : type.plural;

        return {
          params: { framework, index },
          props: {
            type,
            examples: tagExamples,
            tag,
            tags: tagsWithLength,
            frameworkLength,
          },
        };
      });
    });
  });
}) satisfies GetStaticPaths;

const { type, frameworkLength, tags, tag, examples } = Astro.props;
const { framework } = Astro.params;

Astro.locals.framework = framework;

const galleries = await getCollection("galleries");

function getPlural(string: string, length = 2) {
  const plural = length === 1 ? "" : "s";
  return `${string}${plural}`;
}

function getCardDescription(id: string) {
  const gallery = galleries.find((gallery) => gallery.id === id);
  const length = gallery?.data.length || 1;
  return `${length} ${getPlural(type.singular, length)}`;
}

function getTagPath(tag: (typeof tags)[number] | null) {
  const tagPath = tag?.id ? `/${tag.id}` : "";
  return `/${framework}/${type.plural}${tagPath}/#tags`;
}

function getExamplePath(example: CollectionEntry<"examples">) {
  return `/${framework}/${type.plural}/${example.id}`;
}

const frameworkData = getFramework(framework);

const title = `${frameworkData.label} ${tag?.label || ""} ${type.capitalPlural}`;

const groupPath = `/${framework}/${type.plural}`;
const guides = (
  await getCollection("guides", filterGuidesByGroup(groupPath))
).map(getGuideDetail);
const hasGuides = guides.length > 0;
---

<Layout {title}>
  <Meta
    slot="meta"
    {title}
    {framework}
    type={type.plural === "components" ? "components" : "examples"}
  />
  <div
    class="ak-container-size-default py-24 ak-container flex flex-col items-center gap-8"
  >
    <div class="flex flex-col items-center gap-4">
      {
        !!guides[0] && (
          <a
            href={guides[0].path}
            class="ak-button rounded-full ak-badge-primary text-sm"
          >
            <span>Tutorials, guides, and more</span>
            <Icon name="arrowRight" className="flex-none" />
          </a>
        )
      }
      <h1
        class="text-2xl @3xl:text-4xl font-semibold relative text-center flex items-center gap-2"
      >
        {
          type.singular === "example" && (
            <span class="ak-text-primary/0">{frameworkLength}</span>
          )
        }
        {
          type.singular === "component" && (
            <Icon name={frameworkData.icon} className="flex-none" />
          )
        }
        {frameworkData.label}
        {getPlural(type.capitalSingular, frameworkLength)}
        <BoxPatternsMiddle />
      </h1>
    </div>
    <div class="flex flex-col gap-4 items-center">
      <button
        class="ak-input flex items-center gap-2 ak-frame-field/1 text-start"
      >
        <div class="flex items-center gap-2 ak-frame-field/2 flex-grow min-w-0">
          <Icon name="search" className="flex-none" />
          <div class="ak-input-placeholder truncate">
            Search {frameworkData.label}
            {getPlural(type.singular, frameworkLength)}
          </div>
        </div>
        <div class="flex-1 w-10"></div>
        <kbd class="ak-text/0 ak-layer-pop-1.5 ak-frame-field/2">/</kbd>
      </button>
    </div>
  </div>
  <div
    class="sticky top-(--header-height) ak-layer-current w-full h-px z-2 -translate-y-px"
  >
  </div>
  <div
    id="tags"
    class:list={[
      "ak-layer-current ring scroll-mt-[calc(var(--header-height)-1px)] content-start",
      "[--p:var(--ak-container-p)]",
      "[--sidebar-menu-width:max(14rem,calc(100%-min(100%,var(--container-default)+var(--ak-container-p)*2))/2)]",
      "grid-cols-[var(--sidebar-menu-width)_min(calc(100%-var(--sidebar-menu-width)),var(--container-default)+var(--ak-container-p)*2)]",
      "@max-overlap:grid-cols-[var(--sidebar-menu-width)_1fr]",
      hasGuides && "@5xl:grid",
    ]}
  >
    {
      hasGuides && (
        <SidebarMenu
          revealOnStuck
          items={[
            { label: type.capitalPlural, href: groupPath },
            { label: "Guides" },
            ...guides.map((guide) => ({
              label: guide.data.title,
              href: guide.path,
            })),
          ]}
        />
      )
    }
    <div
      class:list={[
        "flex flex-col ak-layer-current border-x z-1 min-h-[100dvh]",
        !hasGuides &&
          "ak-container-size-[calc(var(--container-default)+var(--p)*2)]/0 ak-container",
      ]}
    >
      <HorizontalScroll
        class="sticky top-(--header-height) z-2 ak-layer-current [box-shadow:0_1px_0_0_var(--ak-layer-border)]"
      >
        <ul class="flex items-center gap-3 p-3 float-start">
          {
            [null, ...tags].map((t) => {
              const isCurrent = t?.id === tag?.id;
              const length = t?.length ?? frameworkLength;
              return (
                <li>
                  <a
                    href={getTagPath(t)}
                    aria-current={isCurrent ? "page" : undefined}
                    class="ak-button ak-layer-pop text-sm aria-[current]:ak-layer-pop-12 rounded-full ak-frame-field/1"
                  >
                    <span class="ps-2">{t?.label ?? "All"}</span>
                    <span class="ak-text/0 rounded-full px-1.5 ak-layer-pop min-w-(--ak-button-leading) text-center in-aria-[current]:ak-layer-pop-3">
                      {length}
                      <span class="sr-only">
                        {getPlural(type.singular, length)}
                      </span>
                    </span>
                  </a>
                </li>
              );
            })
          }
        </ul>
      </HorizontalScroll>
      <div
        class="grid grid-cols-[repeat(auto-fill,minmax(16rem,1fr))] gap-4 p-4 pt-[calc(--spacing(4)+1px)]"
      >
        {
          examples.map((example) => (
            <PageCard
              href={getExamplePath(example)}
              thumbnailId={example.id}
              title={example.data.title}
              description={getCardDescription(example.id)}
              plus={example.data.tags.includes("plus")}
            />
          ))
        }
      </div>
    </div>
  </div>
</Layout>

<script>
  // Scroll to the current tag when the page loads
  document.addEventListener("astro:page-load", () => {
    const list = document.getElementById("tags");
    const current = list?.querySelector<HTMLElement>('[aria-current="page"]');
    current?.scrollIntoView({
      behavior: "instant",
      inline: "nearest",
      block: "nearest",
    });
  });
</script>
