---
/**
 * @license
 * Copyright 2025-present Ariakit FZ-LLC. All Rights Reserved.
 *
 * This software is proprietary. See the license.md file in the root of this
 * package for licensing terms.
 *
 * SPDX-License-Identifier: UNLICENSED
 */
import { getCollection } from "astro:content";
import type { GetStaticPaths } from "astro";
import { mapTags } from "#app/lib/tags.ts";
import Layout from "#app/pages/_layout.astro";
import HorizontalScroll from "#app/components/horizontal-scroll.astro";
import { Icon } from "#app/icons/icon.react.tsx";
import { getFramework } from "#app/lib/frameworks.ts";
import { BoxPatternsMiddle } from "#app/components/box-patterns.react.tsx";
import SidebarMenu from "#app/components/sidebar-menu.astro";
import PageCardExample from "#app/components/page-card-example.astro";
import PageCardComponent from "#app/components/page-card-component.astro";
import {
  filterGuidesByGroup,
  getGuideDetail,
  getGalleryLength,
} from "#app/lib/content.ts";
import { uniq } from "#app/lib/array.ts";
import Meta from "#app/components/meta.astro";
import pluralize from "pluralize";
import { capitalize } from "#app/lib/string.ts";
import TimelineAnchor from "#app/components/timeline-anchor.astro";

export const getStaticPaths = (async () => {
  const types = ["components", "examples"] as const;
  const allEntries = (
    await Promise.all(types.map((type) => getCollection(type)))
  ).flat();
  // Get all galleries so we can count the number of items in each gallery.
  const allGalleries = await getCollection("galleries");
  // Get all unique frameworks from the entries.
  const frameworks = uniq(allEntries.flatMap((entry) => entry.data.frameworks));
  // Create a page for each framework.
  return frameworks.flatMap((framework) => {
    const frameworkEntries = allEntries
      .filter((entry) => entry.data.frameworks.includes(framework))
      .sort((a, b) => a.data.title.localeCompare(b.data.title));
    // Create a page for each type (components, examples).
    return types.flatMap((type) => {
      const typeEntries = frameworkEntries.filter(
        (entry) => entry.collection === type
      );
      const ids = typeEntries.map((entry) => entry.id);
      const galleries = allGalleries.filter((entry) => ids.includes(entry.id));
      // Count the total number of gallery items for the current framework and
      // type.
      const frameworkLength = getGalleryLength(typeEntries, galleries);
      // Get all unique tags for the current entries.
      const tags = mapTags(
        typeEntries.flatMap((entry) => entry.data.tags),
        [framework]
      );
      // Calculate the number of entries for each tag.
      const tagsWithLength = tags.map((tag) => {
        const tagEntries = typeEntries.filter(
          (entry) => !!entry.data.tags.find((t) => t === tag?.id)
        );
        const tagLength = getGalleryLength(tagEntries, galleries);
        return { ...tag, length: tagLength };
      });
      // Create a page for each tag, plus a page for all entries (null tag).
      return [null, ...tags].map((tag) => {
        const tagEntries = !tag
          ? typeEntries
          : typeEntries.filter(
              (entry) => !!entry.data.tags.find((t) => t === tag?.id)
            );
        const index = tag ? `${type}/${tag.id}` : type;
        return {
          params: { framework, index },
          props: {
            type,
            entries: tagEntries,
            tag,
            tags: tagsWithLength,
            frameworkLength,
          },
        };
      });
    });
  });
}) satisfies GetStaticPaths;

const { type, frameworkLength, tags, tag, entries } = Astro.props;
const { framework } = Astro.params;

Astro.locals.framework = framework;

function getTagPath(tag: (typeof tags)[number] | null) {
  const tagPath = tag?.id ? `/${tag.id}` : "";
  return `/${framework}/${type}${tagPath}/#tags`;
}

const frameworkData = getFramework(framework);

const typeTitle = capitalize(type);
const title = `${frameworkData.label} ${tag?.label || ""} ${typeTitle}`;

const groupPath = `/${framework}/${type}`;
const guides = (
  await getCollection("guides", filterGuidesByGroup(groupPath))
).map(getGuideDetail);
const hasGuides = guides.length > 0;
---

<Layout {title}>
  <Meta slot="meta" type={type} title={title} framework={framework} />
  <div
    class="ak-container-size-default py-24 ak-container flex flex-col items-center gap-8"
  >
    <div class="flex flex-col items-center gap-4">
      {
        !!guides[0] && (
          <TimelineAnchor
            as="a"
            name="sidebar-menu"
            href={guides[0].path}
            class="ak-button rounded-full ak-badge-primary text-sm"
          >
            <span>Tutorials, guides, and more</span>
            <Icon name="arrowRight" className="flex-none" />
          </TimelineAnchor>
        )
      }
      <h1
        class="text-2xl @3xl:text-4xl font-semibold relative text-center flex items-center gap-2"
      >
        {
          type === "examples" && (
            <span class="ak-text-primary/0">{frameworkLength}</span>
          )
        }
        {
          type === "components" && (
            <Icon name={frameworkData.icon} className="flex-none" />
          )
        }
        {frameworkData.label}
        {pluralize(typeTitle, frameworkLength)}
        <BoxPatternsMiddle />
      </h1>
    </div>
    <div class="flex flex-col gap-4 items-center">
      <button
        class="ak-input flex items-center gap-2 ak-frame-field/1 text-start"
      >
        <div class="flex items-center gap-2 ak-frame-field/2 flex-grow min-w-0">
          <Icon name="search" className="flex-none" />
          <div class="ak-input-placeholder truncate">
            Search {frameworkData.label}
            {pluralize(typeTitle, frameworkLength)}
          </div>
        </div>
        <div class="flex-1 w-10"></div>
        <kbd class="ak-text/0 ak-layer-pop-1.5 ak-frame-field/2">
          {type === "components" ? "," : "/"}
        </kbd>
      </button>
    </div>
  </div>
  <div
    class="sticky top-(--header-height) ak-layer-current w-full h-px z-2 -translate-y-px"
  >
  </div>
  <div
    id="tags"
    class:list={[
      "ak-layer-current ring scroll-mt-[calc(var(--header-height)-1px)] content-start",
      "[--p:var(--ak-container-p)]",
      "[--sidebar-menu-width:max(14rem,calc(100%-min(100%,var(--container-default)+var(--ak-container-p)*2))/2)]",
      "grid-cols-[var(--sidebar-menu-width)_min(calc(100%-var(--sidebar-menu-width)),var(--container-default)+var(--ak-container-p)*2)]",
      "@max-overlap:grid-cols-[var(--sidebar-menu-width)_1fr]",
      hasGuides && "@5xl:grid",
    ]}
  >
    {
      hasGuides && (
        <SidebarMenu
          revealAnchorName="sidebar-menu"
          items={[
            { label: capitalize(type), href: groupPath, currentPage: !!tag },
            { label: "Guides" },
            ...guides.map((guide) => ({
              label: guide.data.title,
              href: guide.path,
            })),
          ]}
        />
      )
    }
    <div
      class:list={[
        "flex flex-col ak-layer-current z-1 min-h-[100dvh]",
        hasGuides
          ? "@5xl:border-e"
          : "@default:border-x ak-container-size-[calc(var(--container-default)+var(--p)*2)]/0 ak-container",
      ]}
    >
      <HorizontalScroll
        class="sticky top-(--header-height) z-2 ak-layer-current [box-shadow:0_1px_0_0_var(--ak-layer-border)]"
      >
        <ul class="flex items-center gap-3 p-3 float-start">
          {
            [null, ...tags].map((t) => {
              const isCurrent = t?.id === tag?.id;
              const length = t?.length ?? frameworkLength;
              return (
                <li>
                  <a
                    href={getTagPath(t)}
                    aria-current={isCurrent ? "page" : undefined}
                    class="ak-button ak-layer-pop text-sm aria-[current]:ak-layer-pop-12 rounded-full ak-frame-field/1"
                  >
                    <span class="ps-2">{t?.label ?? "All"}</span>
                    <span class="ak-text/0 rounded-full ak-edge/0 ring px-1.5 ak-layer-pop min-w-(--ak-button-leading) text-center in-aria-[current]:ak-layer-pop-3">
                      {length}
                      <span class="sr-only">{pluralize(type, length)}</span>
                    </span>
                  </a>
                </li>
              );
            })
          }
        </ul>
      </HorizontalScroll>
      <div
        class="grid grid-cols-[repeat(auto-fill,minmax(16rem,1fr))] gap-4 p-4"
      >
        {
          entries.map((entry) =>
            entry.collection === "components" ? (
              <PageCardComponent {entry} />
            ) : (
              <PageCardExample {entry} />
            )
          )
        }
      </div>
    </div>
  </div>
</Layout>

<script>
  // Scroll to the current tag when the page loads
  document.addEventListener("astro:page-load", () => {
    const list = document.getElementById("tags");
    const current = list?.querySelector<HTMLElement>('[aria-current="page"]');
    current?.scrollIntoView({
      behavior: "instant",
      inline: "nearest",
      block: "nearest",
    });
  });
</script>
