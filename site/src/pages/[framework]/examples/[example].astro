---
import { BoxPatternsRight } from "#app/components/box-patterns.react.tsx";
import ContentAdmonition from "#app/components/content-admonition.astro";
import ContentCodeBlock from "#app/components/content-code-block.astro";
import ContentHeading from "#app/components/content-heading.astro";
import ContentLink from "#app/components/content-link.astro";
import ContentList from "#app/components/content-list.astro";
import ContentParagraph from "#app/components/content-paragraph.astro";
import TableOfContents from "#app/components/table-of-contents.astro";
import { Icon } from "#app/icons/icon.react.tsx";
import { mapTags } from "#app/lib/tags.ts";
import Layout from "#app/pages/_layout.astro";
import type { GetStaticPaths } from "astro";
import { getCollection, render } from "astro:content";

export const getStaticPaths = (async () => {
  const entries = await getCollection("examples");
  const descriptions = await getCollection("descriptions");
  const galleries = await getCollection("galleries");
  return entries.flatMap((entry) => {
    const gallery = galleries.find((gallery) => gallery.id === entry.id);
    const description = descriptions.find((header) => header.id === entry.id);
    return entry.data.frameworks.map((framework) => ({
      params: { framework, example: entry.id },
      props: { entry, gallery, description },
    }));
  });
}) satisfies GetStaticPaths;

const { framework } = Astro.params;
const { entry, gallery, description } = Astro.props;
const { Content, headings } = await render(entry);
const { Content: Gallery = Fragment } = gallery ? await render(gallery) : {};
const { Content: Description = Fragment } = description
  ? await render(description)
  : {};

const examples = await getCollection("examples");
const tags = mapTags(entry.data.tags, [framework]);

Astro.locals.framework = framework;
Astro.locals.example = entry.id;

const components = {
  a: ContentLink,
  p: ContentParagraph,
  pre: ContentCodeBlock,
  h1: ContentHeading,
  h2: ContentHeading,
  h3: ContentHeading,
  h4: ContentHeading,
  h5: ContentHeading,
  h6: ContentHeading,
  ul: ContentList,
  ol: ContentList,
  admonition: ContentAdmonition,
};
---

<Layout title={entry.data.title} {headings}>
  <div class="overflow-x-clip">
    <div class="ak-container-size-default ak-container py-24">
      <h1
        class="text-4xl font-semibold mb-4 ak-container-size-default/0 ak-container"
      >
        {entry.data.title}
      </h1>
      <div
        class="grid @3xl:grid-cols-[1fr_var(--container-sidebar)] gap-3 items-start"
      >
        <div
          class="ak-text/60 text-lg ak-container-size-content/0 ak-container"
        >
          <Description />
          {
            !!tags.length && (
              <ul class="flex gap-2 mt-4">
                {tags.map((tag) => (
                  <li>
                    <a
                      href={`/${framework}/examples/${tag.id}`}
                      class="ak-badge ak-button ak-layer-pop"
                    >
                      {tag.label}
                    </a>
                  </li>
                ))}
              </ul>
            )
          }
        </div>
        <div class="ms-auto flex gap-2 items-center relative">
          <BoxPatternsRight />
          <div class="flex gap-2">
            <button
              class="ak-button ak-layer-primary-down-2 ak-frame-border ak-edge-primary/25 flex-1"
            >
              <Icon name="copyAi" strokeWidth={2} /> Copy AI prompt
              <kbd class="ak-text/0 ms-1">
                <span class="font-sans">âŒ˜</span>I
              </kbd>
            </button>
            <button
              class="ak-button ak-layer-current ak-layer-pop ak-frame-border"
            >
              <Icon name="shadcn" />
              <span class="sr-only">Copy shadcn command</span>
            </button>
          </div>
        </div>
      </div>
    </div>
    <div
      data-gallery="true"
      class="ak-container-size-wider ak-container flex flex-col gap-12 mb-16"
    >
      <Gallery {framework} {components} />
    </div>
    <div data-content="true" class="ak-container-size-wider ak-container">
      <div class="grid @3xl:grid-cols-[1fr_var(--container-sidebar)]">
        <div
          class="ak-prose ak-prose-text-base/relaxed @5xl:ak-prose-text-lg/relaxed"
        >
          <Content {framework} {components} />
        </div>
        <div class="hidden @3xl:block ps-3">
          <TableOfContents
            title={entry.data.title}
            {headings}
            class="sticky top-[calc(var(--header-height)+--spacing(8))] max-h-[calc(100dvh---spacing(25))] overflow-y-auto"
          />
        </div>
      </div>
    </div>
  </div>
  {
    examples.flatMap((example) =>
      example.data.frameworks.map((framework) => (
        <a href={`/${framework}/examples/${example.id}`}>
          {framework}/{example.data.title}
        </a>
      ))
    )
  }
</Layout>
