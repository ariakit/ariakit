---
/**
 * @license
 * Copyright 2025-present Ariakit FZ-LLC. All Rights Reserved.
 *
 * This software is proprietary. See the license.md file in the root of this
 * package for licensing terms.
 *
 * SPDX-License-Identifier: UNLICENSED
 */
import { BoxPatternsRight } from "#app/components/box-patterns.react.tsx";
import { components } from "#app/components/content-components.astro";
import Meta from "#app/components/meta.astro";
import TableOfContents from "#app/components/table-of-contents.astro";
import { Icon } from "#app/icons/icon.react.tsx";
import { mapTags } from "#app/lib/tags.ts";
import Layout from "#app/pages/_layout.astro";
import type { GetStaticPaths } from "astro";
import { getCollection, render } from "astro:content";
import { remark } from "remark";
import stripMarkdown from "strip-markdown";

export const getStaticPaths = (async () => {
  const entries = await getCollection("examples");
  const descriptions = await getCollection("descriptions");
  const galleries = await getCollection("galleries");
  return entries.flatMap((entry) => {
    const type = entry.data.component ? "components" : "examples";
    const gallery = galleries.find((gallery) => gallery.id === entry.id);
    const description = descriptions.find((header) => header.id === entry.id);
    return entry.data.frameworks.map((framework) => ({
      params: { framework, example: `${type}/${entry.id}` },
      props: { entry, gallery, description, type } as const,
    }));
  });
}) satisfies GetStaticPaths;

const { framework } = Astro.params;
const { entry, gallery, description, type } = Astro.props;
const { Content, headings } = await render(entry);
const { Content: Gallery } = gallery ? await render(gallery) : {};
const { Content: Description } = description ? await render(description) : {};

const tags = mapTags(entry.data.tags, [framework]);

Astro.locals.framework = framework;
Astro.locals.example = entry.id;

const title = entry.data.title;

const { value: excerpt } = await remark()
  .use(stripMarkdown)
  .process(description?.body ?? "");
---

<Layout {title} {headings}>
  <Meta
    slot="meta"
    {type}
    {framework}
    id={entry.id}
    {title}
    description={excerpt.toString()}
  />
  <div class="overflow-x-clip">
    <div class="ak-container-size-default ak-container py-24">
      <h1
        class="text-4xl font-semibold mb-4 ak-container-size-default/0 ak-container"
      >
        {entry.data.title}
      </h1>
      <div
        class="grid @3xl:grid-cols-[1fr_var(--container-sidebar)] gap-3 items-start"
      >
        <div
          class="ak-text/60 text-lg ak-container-size-content/0 ak-container"
        >
          {Description && <Description />}
          {
            !!tags.length && (
              <ul class="flex gap-2 mt-4">
                {tags.map((tag) => (
                  <li>
                    <a
                      href={`/${framework}/${type}/${tag.id}`}
                      class="ak-badge ak-button ak-layer-pop"
                    >
                      {tag.label}
                    </a>
                  </li>
                ))}
              </ul>
            )
          }
        </div>
        <div class="ms-auto flex gap-2 items-center relative">
          <BoxPatternsRight />
          <div class="flex gap-2">
            <button
              class="ak-button ak-layer-primary-down-2 ak-frame-border ak-edge-primary/25 flex-1"
            >
              <Icon name="copyAi" strokeWidth={2} /> Copy AI prompt
              <kbd class="ak-text/0 ms-1">
                <span class="font-sans">âŒ˜</span>I
              </kbd>
            </button>
            <button
              class="ak-button ak-layer-current ak-layer-pop ak-frame-border"
            >
              <Icon name="shadcn" />
              <span class="sr-only">Copy shadcn command</span>
            </button>
          </div>
        </div>
      </div>
    </div>
    <div
      data-gallery="true"
      class="ak-container-size-wider ak-container flex flex-col gap-12 mb-16"
    >
      {Gallery && <Gallery {framework} {components} />}
    </div>
    <div data-content="true" class="ak-container-size-wider ak-container">
      <div class="grid @3xl:grid-cols-[1fr_var(--container-sidebar)]">
        <div
          class="ak-prose ak-prose-text-base/relaxed @5xl:ak-prose-text-lg/relaxed"
        >
          <Content {framework} {components} />
        </div>
        <div class="hidden @3xl:block ps-3">
          <TableOfContents
            title={entry.data.title}
            {headings}
            class="sticky top-[calc(var(--header-height)+--spacing(8))] max-h-[calc(100dvh---spacing(25))] overflow-y-auto"
          />
        </div>
      </div>
    </div>
  </div>
</Layout>
