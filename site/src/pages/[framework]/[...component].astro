---
/**
 * @license
 * Copyright 2025-present Ariakit FZ-LLC. All Rights Reserved.
 *
 * This software is proprietary. See the license.md file in the root of this
 * package for licensing terms.
 *
 * SPDX-License-Identifier: UNLICENSED
 */
import {
  BoxPatternsLeftOnly,
  BoxPatternsRightOnly,
} from "#app/components/box-patterns.react.tsx";
import ContainerLeftMenu from "#app/components/container-left-menu.astro";
import ContainerRightMenu from "#app/components/container-right-menu.astro";
import { components } from "#app/components/content-components.astro";
import ContentHeading from "#app/components/content-heading.astro";
import ContentLink from "#app/components/content-link.astro";
import ContentParagraph from "#app/components/content-paragraph.astro";
import Meta from "#app/components/meta.astro";
import PageCardExample from "#app/components/page-card-example.astro";
import type { SidebarMenuItem } from "#app/components/sidebar-menu.astro";
import SidebarMenu from "#app/components/sidebar-menu.astro";
import Sticky from "#app/components/sticky.astro";
import TableOfContents from "#app/components/table-of-contents.astro";
import TimelineAnchor from "#app/components/timeline-anchor.astro";
import TimelineAnimate from "#app/components/timeline-animate.astro";
import { Icon } from "#app/icons/icon.react.tsx";
import { descriptionToText } from "#app/lib/content.ts";
import { rehypeAsTagName } from "#app/lib/rehype.ts";
import { mapTags } from "#app/lib/tags.ts";
import Layout from "#app/pages/_layout.astro";
import { createMarkdownProcessor } from "@astrojs/markdown-remark";
import type { GetStaticPaths } from "astro";
import { getCollection, render } from "astro:content";
import ApiReferenceContent from "./[...reference].astro";

export const getStaticPaths = (async () => {
  const entries = await getCollection("components");
  const descriptions = await getCollection("descriptions");
  const galleries = await getCollection("galleries");
  const examples = await getCollection("examples");
  const references = await getCollection("references");
  return entries.flatMap((entry) => {
    const id = `${entry.id}/_component`;
    const gallery = galleries.find((gallery) => gallery.id === id);
    const description = descriptions.find((header) => header.id === id);
    const componentExamples = examples.filter((example) =>
      example.data.components.some((component) => component.id === entry.id)
    );
    return entry.data.frameworks.flatMap((framework) => {
      const prefix = `${framework}/${entry.id}/`;
      const componentReferences = references.filter((reference) =>
        reference.id.startsWith(prefix)
      );
      const reference = componentReferences.find((reference) => {
        return reference.data.kind === "component";
      });
      const props = {
        entry,
        gallery,
        description,
        examples: componentExamples,
        references: componentReferences,
        reference,
        main: true,
      } as const;
      const main = {
        params: { framework, component: `components/${entry.id}` },
        props,
      };
      return [
        main,
        ...componentReferences.map((reference) => {
          const slug = reference.id.replace(prefix, "");
          return {
            params: { framework, component: `components/${entry.id}/${slug}` },
            props: { ...props, reference, main: false },
          };
        }),
      ];
    });
  });
}) satisfies GetStaticPaths;

const { framework } = Astro.params;
const { entry, gallery, description, examples, references, reference } =
  Astro.props;
const { Content, headings } = await render(entry);
const { Content: Gallery } = gallery ? await render(gallery) : {};
const { Content: Description } = description ? await render(description) : {};

Astro.locals.framework = framework;
Astro.locals.example = entry.id;

headings.unshift(
  { slug: "examples", text: "Examples", depth: 2 },
  { slug: "api", text: "API Reference", depth: 2 }
);

const tags = mapTags(entry.data.tags, [framework]);
const title = entry.data.title;
const descriptionText = await descriptionToText(
  Description,
  framework,
  components
);

function getFunctions() {
  return references.filter(
    (ref) => ref.data.kind === "function" || ref.data.kind === "store"
  );
}

function getComponents() {
  return references.filter((ref) => ref.data.kind === "component");
}

function getMenu(
  references: ReturnType<typeof getFunctions> | ReturnType<typeof getComponents>
) {
  return references.map((ref) => {
    const prefix = `${framework}/${entry.id}/`;
    const slug = ref.id.replace(prefix, "");
    return {
      label: ref.data.name,
      href: `/${framework}/components/${entry.id}/${slug}/#api`,
      kind: ref.data.kind,
      symbols: true,
    } satisfies SidebarMenuItem;
  });
}

const functionsMenu = getFunctions();
const componentsMenu = getComponents();

const referenceMenu = [
  ...(functionsMenu.length ? [{ label: "Functions" }] : []),
  ...getMenu(functionsMenu),
  ...(componentsMenu.length ? [{ label: "Components" }] : []),
  ...getMenu(componentsMenu),
];

// TODO: This should be a singleton.
const processor = await createMarkdownProcessor({
  syntaxHighlight: false,
  rehypePlugins: [
    [
      rehypeAsTagName,
      { tags: ["h1", "h2", "h3", "h4", "h5", "h6", "ul", "ol"] },
    ],
  ],
});

async function parseDescription(description: string) {
  const result = await processor.render(description);
  return result.code;
}
---

<Layout title={title}>
  <Meta
    slot="meta"
    id={entry.id}
    type="components"
    title={title}
    framework={framework}
    description={descriptionText}
  />

  <div class="overflow-x-clip">
    <div class="ak-container-size-default ak-container py-24">
      <h1
        class="text-4xl font-semibold mb-5 ak-container-size-default/0 ak-container relative"
      >
        {entry.data.title}
        <BoxPatternsLeftOnly />
      </h1>
      <div
        class="grid @3xl:grid-cols-[1fr_var(--container-sidebar)] gap-3 items-start"
      >
        <div
          class="text-lg ak-container-size-content/0 ak-container flex flex-col gap-5"
        >
          {
            Description && (
              <div class="ak-text/60 ak-prose-elements text-lg/[1.8] [&_code]:ak-text/60 relative">
                <Description {framework} {components} />
                <BoxPatternsRightOnly />
              </div>
            )
          }
          {
            !!tags.length && (
              <ul class="flex gap-2">
                {tags.map((tag) => (
                  <li>
                    <a
                      href={`/${framework}/components/${tag.id}`}
                      class="ak-badge ak-button ak-layer-pop"
                    >
                      {tag.label}
                    </a>
                  </li>
                ))}
              </ul>
            )
          }
        </div>
      </div>
    </div>
  </div>
  <div
    data-gallery="true"
    class="ak-container-size-wider ak-container flex flex-col gap-12 mb-24"
  >
    {Gallery && <Gallery {framework} {components} />}
  </div>
  {
    !!examples.length && (
      <div class="ak-prose ak-prose-text-base/relaxed @5xl:ak-prose-text-lg/loose ak-container-size-wider ak-container mb-24">
        <div class="grid @3xl:grid-cols-[1fr_var(--container-sidebar)]">
          <ContentHeading as="h2" id="examples">
            <ContentLink href="#examples">Examples</ContentLink>
          </ContentHeading>
          <div />
          <ContentParagraph class="ak-text/0 mb-2">
            Learn <strong>{entry.data.title}</strong> by exploring these
            real-world examples.
          </ContentParagraph>
        </div>
        <div
          class:list={[
            "grid grid-cols-[repeat(auto-fill,minmax(16rem,1fr))] gap-4 ak-container",
            // "ak-container-size-wider/0",
            "ak-container-size-default/0",
          ]}
        >
          {[
            ...examples,
            // ...examples,
            // ...examples,
            // ...examples,
            // ...examples,
            // ...examples,
            // ...examples,
          ].map((example) => (
            <PageCardExample entry={example} />
          ))}
        </div>
      </div>
    )
  }
  <div class="relative mb-24 [--scroll-mt:calc(var(--header-height)-1px)]">
    <TimelineAnchor name="anchor" />
    <Sticky
      threshold={2}
      class="border-b ak-layer-current top-(--scroll-mt) z-4 flex items-center h-14 [&+*]:[--header-height:calc(var(--scroll-mt)+--spacing(14))]"
    >
      <div class="ak-container-size-wider ak-container">
        <div
          class="ak-prose ak-prose-text-base/relaxed @5xl:ak-prose-text-lg/loose"
        >
          <TimelineAnimate
            as="h2"
            timeline="anchor"
            rangeStart="exit calc(var(--scroll-mt) * -3)"
            rangeEnd="exit calc(var(--scroll-mt) * -1)"
            keyframes={`to { font-size: 1.25rem; margin-bottom: 0; }`}
            class="mb-[1em] relative scroll-mt-[calc(var(--header-height)+1.25em)] ak-container ak-container-size-default/0"
          >
            <ContentLink href="#api">API Reference</ContentLink>
          </TimelineAnimate>
        </div>
      </div>
    </Sticky>
    <div id="api" class="ak-layer-current border-b scroll-mt-(--header-height)">
      <ContainerLeftMenu>
        <SidebarMenu items={referenceMenu}>
          <div slot="before" class="p-2">
            <button
              class="ak-input flex items-center ak-frame-field/1 text-start w-full text-sm"
            >
              <div
                class="flex items-center gap-2 ak-frame-field/2 flex-grow min-w-0"
              >
                <Icon name="search" className="flex-none" />
                <div class="ak-input-placeholder truncate">
                  Search API Reference
                </div>
              </div>
              <div class="flex-1 w-10"></div>
              <kbd class="ak-text/0 ak-layer-pop-1.5 ak-frame-field/2">
                &lt;
              </kbd>
            </button>
          </div>
        </SidebarMenu>
        <div data-content="true" class="ak-layer-current">
          <ApiReferenceContent reference={reference!} />
        </div>
      </ContainerLeftMenu>
    </div>
  </div>
  <div data-content="true" class="ak-container-size-wider ak-container">
    <ContainerRightMenu>
      <div
        class="ak-prose ak-prose-text-base/relaxed @5xl:ak-prose-text-lg/loose"
      >
        <Content framework={framework} components={components} />
      </div>
      <TableOfContents
        slot="toc"
        title={entry.data.title}
        headings={headings}
        class="sticky [--top:calc(var(--header-height)+--spacing(8))] top-(--top) max-h-[calc(100dvh-var(--top))] overflow-y-auto"
      />
    </ContainerRightMenu>
  </div>
</Layout>
