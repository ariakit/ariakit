---
/**
 * @license
 * Copyright 2025-present Ariakit FZ-LLC. All Rights Reserved.
 *
 * This software is proprietary. See the license.md file in the root of this
 * package for licensing terms.
 *
 * SPDX-License-Identifier: UNLICENSED
 */
import type { HTMLTag, Polymorphic } from "astro/types";

type Props<T extends HTMLTag> = Polymorphic<{ as: T }> & {
  /**
   * Timeline name. May include or omit the leading dashes.
   * Examples: "anchor", "api", "--anchor", "--api".
   */
  name?: string;
  /**
   * Element height. Useful when using a block-level sentinel.
   * Defaults to "1px".
   */
  height?: string;
  /**
   * Axis for the view timeline. Defaults to "block".
   */
  axis?: "block" | "inline";
  /**
   * CSS selector for the element that receives timeline-scope.
   * Defaults to "body".
   */
  scopeRoot?: string;
};

const {
  as: Tag = "div",
  name = "anchor",
  axis = "block",
  scopeRoot = "body",
  ...rest
} = Astro.props as Props<HTMLTag>;

const normalizedName = name.startsWith("--") ? name : `--${name}`;
// Data attribute value: remove leading dashes for cleaner selectors
const dataValue = normalizedName.replace(/^--/, "");

// Build global CSS for anchor and timeline scoping
const globalCss = `
[data-timeline-anchor="${dataValue}"] {
  min-height: 0.1px;
  view-timeline-name: ${normalizedName};
  view-timeline-axis: ${axis};
  ${scopeRoot}:has(&) {
    timeline-scope: ${normalizedName};
  }
}
`;
---

<Tag data-timeline-anchor={dataValue} {...rest}>
  <slot />
</Tag>

<style is:global set:html={globalCss}></style>
