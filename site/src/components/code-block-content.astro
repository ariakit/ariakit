---
/**
 * @license
 * Copyright 2025-present Ariakit FZ-LLC. All Rights Reserved.
 *
 * This software is proprietary. See the license.md file in the root of this
 * package for licensing terms.
 *
 * SPDX-License-Identifier: UNLICENSED
 */
import { getLangFromFilename, highlighter } from "#app/lib/shiki.ts";
import { invariant } from "@ariakit/core/utils/misc";
import { diffLines, diffWordsWithSpace } from "diff";
import type { ThemedToken } from "shiki";
import type { CodeBlockProps } from "./code-block.types";

interface Props extends CodeBlockProps {}

interface TokenFragment {
  content: string;
  token: ThemedToken;
  isHighlighted: boolean;
  tokenIndex: number;
  isDiff?: boolean;
}

interface Segment {
  fragments: TokenFragment[];
  isHighlighted: boolean;
  spansMultipleTokens: boolean;
  isDiff?: boolean;
}

interface DiffInfoItem {
  type: "added" | "removed" | "unchanged" | "modified-inline";
  content: string;
  tokens?: ThemedToken[];
  lineNum?: number;
  diffs?: ReturnType<typeof diffWordsWithSpace>;
}
type DiffInfo = DiffInfoItem[];

interface BaseLine {
  i: number;
  key: string;
}

interface RemovedLine extends BaseLine {
  type: "removed";
  renderType: "removed";
  content: string;
  diffs?: ReturnType<typeof diffWordsWithSpace>;
}

interface RemovedPart {
  renderType: "removed";
  content: string;
}

interface SegmentsPart {
  renderType: "segments";
  isEmpty: boolean;
  segments: Segment[];
}

type LinePart = RemovedPart | SegmentsPart;

interface PartsLine extends BaseLine {
  type: "modified-inline" | "added" | "unchanged";
  renderType: "parts";
  parts: LinePart[];
  lineNum: number;
}

interface SegmentsLine extends BaseLine {
  type: "added" | "unchanged";
  renderType: "segments";
  isEmpty: boolean;
  segments: Segment[];
  lineNum: number;
}

type LineToRender = RemovedLine | PartsLine | SegmentsLine;
type LinesToRender = LineToRender[];

const {
  code,
  previousCode,
  preferMultilineDiff,
  filename,
  lang = filename ? getLangFromFilename(filename) : "text",
  maxLines,
  lineNumbers = false,
  highlightLines = [],
  highlightTokens = [],
} = Astro.props;

const { tokens } = highlighter.codeToTokens(code.trim(), {
  lang,
  themes: {
    light: "github-light",
    dark: "dark-plus",
  },
});

let diffInfo: DiffInfo | null = null;

if (previousCode) {
  const changes = diffLines(previousCode.trim(), code.trim());
  diffInfo = [];
  let newCodeLineIndex = 0;

  const linesCount = code.trim().split("\n").length;
  const multilineDiffCount =
    typeof preferMultilineDiff === "number"
      ? preferMultilineDiff
      : preferMultilineDiff
        ? 0
        : linesCount > 1
          ? 2
          : 0;

  for (let i = 0; i < changes.length; i++) {
    const part = changes[i];
    invariant(part);
    const nextPart = i + 1 < changes.length ? changes[i + 1] : null;

    const lines = part.value.replace(/\n$/, "").split("\n");

    if (part.removed && nextPart?.added) {
      const removedLines = part.value.replace(/\n$/, "").split("\n");
      const addedLines = nextPart.value.replace(/\n$/, "").split("\n");

      if (removedLines.length === addedLines.length) {
        for (let j = 0; j < removedLines.length; j++) {
          const oldLine = removedLines[j];
          const newLine = addedLines[j];
          invariant(oldLine);
          invariant(newLine);
          const wordDiff = diffWordsWithSpace(oldLine, newLine);
          const modifiedSegmentCount = wordDiff.filter(
            (p) => p.added || p.removed
          ).length;

          if (
            modifiedSegmentCount <= multilineDiffCount &&
            oldLine.trim() &&
            newLine.trim()
          ) {
            diffInfo.push({
              type: "modified-inline",
              content: newLine,
              tokens: tokens[newCodeLineIndex],
              lineNum: newCodeLineIndex + 1,
              diffs: wordDiff,
            });
            newCodeLineIndex++;
          } else {
            diffInfo.push({
              type: "removed",
              content: oldLine,
              diffs: wordDiff,
            });
            diffInfo.push({
              type: "added",
              content: newLine,
              tokens: tokens[newCodeLineIndex],
              lineNum: newCodeLineIndex + 1,
              diffs: wordDiff,
            });
            newCodeLineIndex++;
          }
        }
        i++; // Skip nextPart as it has been processed
        continue;
      }
    }

    for (const line of lines) {
      if (part.added) {
        diffInfo.push({
          type: "added",
          content: line,
          tokens: tokens[newCodeLineIndex],
          lineNum: newCodeLineIndex + 1,
        });
        newCodeLineIndex++;
      } else if (part.removed) {
        diffInfo.push({
          type: "removed",
          content: line,
        });
      } else {
        if (newCodeLineIndex >= tokens.length) continue;
        diffInfo.push({
          type: "unchanged",
          content: line,
          tokens: tokens[newCodeLineIndex],
          lineNum: newCodeLineIndex + 1,
        });
        newCodeLineIndex++;
      }
    }
  }
}

function getTokensForSubstring(
  lineTokens: ThemedToken[],
  startIndex: number,
  length: number
) {
  const resultTokens: ThemedToken[] = [];
  if (!lineTokens) return resultTokens;
  let currentPos = 0;
  for (const token of lineTokens) {
    const tokenStart = currentPos;
    const tokenEnd = currentPos + token.content.length;

    if (tokenStart >= startIndex + length || tokenEnd <= startIndex) {
      // token is completely outside the substring
    } else {
      // token is partially or fully inside.
      const substrStartInToken = Math.max(0, startIndex - tokenStart);
      const substrEndInToken = Math.min(
        token.content.length,
        startIndex + length - tokenStart
      );
      const content = token.content.substring(
        substrStartInToken,
        substrEndInToken
      );
      if (content) {
        resultTokens.push({ ...token, content });
      }
    }
    currentPos += token.content.length;
  }
  return resultTokens;
}

function isHighlighted(i: number) {
  return highlightLines.includes(i + 1);
}

function isCollapsed(lineIndex: number) {
  return maxLines !== undefined && lineIndex > maxLines;
}

// Helper function to find all text spans that should be highlighted
function findAllTextHighlights(content: string) {
  const highlights: Array<{ start: number; end: number; text: string }> = [];

  highlightTokens.forEach((t) => {
    const [word, ...indexes] = Array.isArray(t) ? t : [t];

    let startIndex = 0;
    let foundIndex;
    let currentInstanceIndex = 0;

    while ((foundIndex = content.indexOf(word, startIndex)) !== -1) {
      // Check if this instance should be highlighted based on indexes
      const shouldHighlight =
        !indexes.length || indexes.includes(currentInstanceIndex);

      if (shouldHighlight) {
        highlights.push({
          start: foundIndex,
          end: foundIndex + word.length,
          text: word,
        });
      }

      startIndex = foundIndex + 1;
      currentInstanceIndex++;
    }
  });

  // Sort highlights by start position and merge overlapping ones
  highlights.sort((a, b) => a.start - b.start);

  const merged: typeof highlights = [];
  highlights.forEach((current) => {
    const last = merged[merged.length - 1];
    if (last && current.start <= last.end) {
      // Merge overlapping highlights
      last.end = Math.max(last.end, current.end);
    } else {
      merged.push(current);
    }
  });

  return merged;
}

const allHighlights = findAllTextHighlights(code.trim());
const codeLines = code.trim().split("\n");
let charIndex = 0;
const highlightsByLine = codeLines.map((lineContent) => {
  const lineStart = charIndex;
  const lineEnd = lineStart + lineContent.length;
  charIndex = lineEnd + 1; // for \n
  const highlights = allHighlights
    .filter((h) => h.start < lineEnd && h.end > lineStart)
    .map((h) => ({
      ...h,
      start: h.start - lineStart,
      end: h.end - lineStart,
    }));
  return highlights;
});

// Helper function to create segments for text highlighting (returns data only)
function createHighlightSegments(
  line: ThemedToken[],
  textHighlights: Array<
    ReturnType<typeof findAllTextHighlights>[0] & { isDiff?: boolean }
  >
) {
  if (!line.some((token) => token.content)) {
    return { isEmpty: true, segments: [] as Segment[] };
  }

  // Create character-level mapping
  let currentPosition = 0;
  const allFragments: TokenFragment[] = [];

  // Process each token and split it if it crosses highlight boundaries
  line.forEach((token, tokenIndex) => {
    const tokenStart = currentPosition;
    const tokenEnd = currentPosition + token.content.length;

    // Find all highlight boundaries that intersect with this token
    const relevantHighlights = textHighlights.filter(
      (h) => h.start < tokenEnd && h.end > tokenStart
    );

    if (relevantHighlights.length === 0) {
      // Token is completely outside any highlights
      allFragments.push({
        content: token.content,
        token,
        isHighlighted: false,
        tokenIndex,
      });
    } else {
      // Token intersects with highlights - split it
      const splitPoints = new Set([tokenStart, tokenEnd]);

      // Add highlight boundaries as split points
      relevantHighlights.forEach((h) => {
        if (h.start > tokenStart && h.start < tokenEnd) {
          splitPoints.add(h.start);
        }
        if (h.end > tokenStart && h.end < tokenEnd) {
          splitPoints.add(h.end);
        }
      });

      const sortedSplitPoints = Array.from(splitPoints).sort((a, b) => a - b);

      // Create fragments between split points
      for (let i = 0; i < sortedSplitPoints.length - 1; i++) {
        const fragmentStart = sortedSplitPoints[i];
        const fragmentEnd = sortedSplitPoints[i + 1];
        invariant(fragmentStart);
        invariant(fragmentEnd);

        // Check if this fragment is highlighted
        const highlight = textHighlights.find(
          (h) => fragmentStart >= h.start && fragmentEnd <= h.end
        );

        // Extract the content for this fragment
        const relativeStart = fragmentStart - tokenStart;
        const relativeEnd = fragmentEnd - tokenStart;
        const fragmentContent = token.content.slice(relativeStart, relativeEnd);

        if (fragmentContent) {
          allFragments.push({
            content: fragmentContent,
            token,
            isHighlighted: !!highlight,
            tokenIndex,
            isDiff: highlight?.isDiff,
          });
        }
      }
    }

    currentPosition += token.content.length;
  });

  // Group consecutive fragments with the same highlight status into segments
  const segments: Segment[] = [];
  let currentSegment: Segment | null = null;

  allFragments.forEach((fragment) => {
    if (
      !currentSegment ||
      currentSegment.isHighlighted !== fragment.isHighlighted ||
      currentSegment.isDiff !== fragment.isDiff
    ) {
      // Start new segment
      currentSegment = {
        fragments: [fragment],
        isHighlighted: fragment.isHighlighted,
        isDiff: fragment.isDiff,
        spansMultipleTokens: false,
      };
      segments.push(currentSegment);
    } else {
      // Add to current segment
      currentSegment.fragments.push(fragment);
    }
  });

  // Determine if each segment spans multiple tokens
  segments.forEach((segment) => {
    if (segment.isHighlighted && segment.fragments.length > 0) {
      const tokenIndexes = new Set(segment.fragments.map((f) => f.tokenIndex));
      segment.spansMultipleTokens = tokenIndexes.size > 1;
    }
  });

  return { isEmpty: false, segments };
}

const linesToRender = (() => {
  if (diffInfo) {
    const linesData = diffInfo.map((line, i) => ({
      ...line,
      i,
      key: `diff-${i}`,
    }));
    return linesData.map((line) => {
      if (line.type === "removed") {
        return { ...line, renderType: line.type };
      }

      if (line.type === "modified-inline") {
        const parts = [];
        let charIndex = 0;
        const lineHighlights =
          (line.lineNum &&
            highlightsByLine[line.lineNum - 1]?.map((h) => ({ ...h }))) ||
          [];

        for (const part of line.diffs || []) {
          if (part.removed) {
            parts.push({ renderType: "removed", content: part.value });
            continue;
          }

          const partContent = part.value;
          const partStart = charIndex;
          const partEnd = partStart + partContent.length;

          const highlightsInPart: Array<
            ReturnType<typeof findAllTextHighlights>[0] & { isDiff?: boolean }
          > = lineHighlights
            .filter((h) => h.start < partEnd && h.end > partStart)
            .map((h) => ({
              ...h,
              start: h.start - partStart,
              end: h.end - partStart,
            }));

          if (part.added) {
            highlightsInPart.push({
              start: 0,
              end: partContent.length,
              text: partContent,
              isDiff: true,
            });
          }

          // Sort and merge highlights for this part
          highlightsInPart.sort((a, b) => a.start - b.start);
          const mergedHighlights: typeof highlightsInPart = [];
          highlightsInPart.forEach((current) => {
            const last = mergedHighlights[mergedHighlights.length - 1];
            if (last && current.start <= last.end) {
              last.end = Math.max(last.end, current.end);
              if (current.isDiff) last.isDiff = true;
            } else {
              mergedHighlights.push(current);
            }
          });

          const subTokens =
            getTokensForSubstring(
              line.tokens || [],
              partStart,
              partContent.length
            ) || [];
          const { isEmpty, segments } = createHighlightSegments(
            subTokens,
            mergedHighlights
          );
          parts.push({ renderType: "segments", isEmpty, segments });
          charIndex += partContent.length;
        }
        return { ...line, renderType: "parts", parts };
      }

      const lineTokens = line.tokens || [];

      const highlights: Array<
        ReturnType<typeof findAllTextHighlights>[0] & { isDiff?: boolean }
      > =
        (line.lineNum &&
          highlightsByLine[line.lineNum - 1]?.map((h) => ({ ...h }))) ||
        [];

      if (line.diffs) {
        // With diff, `highlights` are the added parts of the line
        let currentPos = 0;
        for (const part of line.diffs) {
          if (part.added) {
            highlights.push({
              start: currentPos,
              end: currentPos + part.value.length,
              text: part.value,
              isDiff: true,
            });
          }
          if (!part.removed) {
            currentPos += part.value.length;
          }
        }
      }

      // Sort and merge highlights
      highlights.sort((a, b) => a.start - b.start);
      const merged: typeof highlights = [];
      highlights.forEach((current) => {
        const last = merged[merged.length - 1];
        if (last && current.start <= last.end) {
          // Merge overlapping highlights
          last.end = Math.max(last.end, current.end);
          if (current.isDiff) {
            last.isDiff = true;
          }
        } else {
          merged.push(current);
        }
      });

      const { isEmpty, segments } = createHighlightSegments(lineTokens, merged);
      return { ...line, renderType: "segments" as const, isEmpty, segments };
    }) as LinesToRender;
  }

  const linesData = tokens.map((line, i) => ({
    key: `token-${i}`,
    i,
    type: "unchanged" as const,
    content: line.map((token) => token.content).join(""),
    tokens: line,
    lineNum: i + 1,
  }));

  return linesData.map((line) => {
    const lineTokens = line.tokens || [];
    const highlights = highlightsByLine[line.i] || [];
    const { isEmpty, segments } = createHighlightSegments(
      lineTokens,
      highlights.map((h) => ({ ...h, isDiff: false }))
    );
    return { ...line, renderType: "segments" as const, isEmpty, segments };
  }) as LinesToRender;
})();

const hasAddedOrRemoved = diffInfo?.some(
  (line) => line.type === "added" || line.type === "removed"
);
---

<Fragment>
  <div
    class:list={[
      "grid whitespace-pre **:data-highlight:ak-edge/25 **:data-highlight:shadow-[inset_calc(0.175rem+0.0625rem*var(--contrast,0))_0_var(--ak-border)]",
      "*:*:ps-4 *:*:in-data-admonition:ps-3",
      (lineNumbers || diffInfo) && {
        "sm:grid-cols-[max-content_1fr]": !hasAddedOrRemoved,
        "grid-cols-[max-content_1fr]": hasAddedOrRemoved,
      },
    ]}
  >
    {
      (lineNumbers || hasAddedOrRemoved) && (
        <div
          aria-hidden
          class:list={[
            "-me-2 grid ak-layer-current sticky z-2 start-0 select-none pointer-events-none text-right ak-text-[#237893]/50 ak-dark:ak-text-[#858585]/50",
            !hasAddedOrRemoved && "max-sm:hidden",
          ]}
        >
          {linesToRender.map((line) => {
            const isAdded = line.type === "added";
            const isRemoved = line.type === "removed";
            const addedOrRemoved = isAdded || isRemoved;
            const highlightLine = isHighlighted(line.i) || isAdded || isRemoved;
            const displayLineNum = isRemoved
              ? "-"
              : lineNumbers
                ? line.lineNum || "+"
                : isAdded
                  ? "+"
                  : "";
            return (
              <span
                data-highlight={highlightLine || undefined}
                class:list={[
                  "pe-4 h-(--line-height)",
                  isHighlighted(line.i) && !addedOrRemoved && "ak-layer-pop",
                  {
                    "ak-layer-mix-green-500/25": isAdded,
                    "ak-layer-mix-red-500/25": isRemoved,
                  },
                ]}
              >
                <span
                  class:list={{
                    "ak-text-red-500": isRemoved,
                    "ak-text-green-500": isAdded,
                  }}
                >
                  {displayLineNum}
                </span>
              </span>
            );
          })}
        </div>
      )
    }
    <code>
      {
        linesToRender.map((lineInfo) => {
          const isAdded = lineInfo.type === "added";
          const isRemoved = lineInfo.type === "removed";
          const addedOrRemoved = isAdded || isRemoved;
          const highlightLine =
            isHighlighted(lineInfo.i) || isAdded || isRemoved;
          const lineClass = {
            "ak-layer-mix-green-500/25": isAdded,
            "ak-layer-mix-red-500/25 ak-text/0": lineInfo.type === "removed",
          };
          const removedTokenClass =
            "ak-layer-mix-red-500/30 ak-edge-red-500/20 ring mx-[0.1em] rounded px-[0.25em] py-0.5 ak-text/0 [text-decoration:none] relative after:absolute after:top-1/2 after:w-full after:start-0 after:h-px after:ak-layer-contrast";

          if (lineInfo.renderType === "removed") {
            return (
              <div
                data-highlight={highlightLine || undefined}
                class:list={[
                  "h-(--line-height) pe-14",
                  lineClass,
                  isHighlighted(lineInfo.i) &&
                    !addedOrRemoved &&
                    "ak-layer-pop",
                ]}
              >
                {lineInfo.diffs
                  ? lineInfo.diffs.map((part) => {
                      if (part.added) return null;
                      return (
                        <del
                          class:list={{
                            [removedTokenClass]: part.removed,
                            "[text-decoration:none]": !part.removed,
                          }}
                        >
                          <span class="relative z-1">{part.value}</span>
                        </del>
                      );
                    })
                  : lineInfo.content}
              </div>
            );
          }

          if (lineInfo.renderType === "parts") {
            return (
              <div
                data-highlight={highlightLine || undefined}
                class:list={[
                  "pe-14 [content-visibility:auto] h-(--line-height)",
                  lineClass,
                  isHighlighted(lineInfo.i) && "ak-layer-pop",
                  isCollapsed(lineInfo.i) && "in-data-collapsed:hidden",
                ]}
              >
                {lineInfo.parts.map((part) => {
                  if (part.renderType === "removed") {
                    return (
                      <del class={removedTokenClass}>
                        <span class="relative z-1">{part.content}</span>
                      </del>
                    );
                  }
                  if (part.renderType === "segments") {
                    const { isEmpty, segments } = part;
                    if (isEmpty) return null;
                    return segments.map((segment: Segment) => {
                      const segmentElements = segment.fragments.map(
                        ({ content, token }: TokenFragment) => {
                          const style = token.htmlStyle as any;
                          const dark = style?.["--shiki-dark"] || token.color;
                          const light = style?.color || token.color;
                          return (
                            <span
                              style={`--dark:${dark}; --light:${light}`}
                              class="ak-text-(--dark)/50 ak-light:ak-text-(--light)/65"
                            >
                              {content || ""}
                            </span>
                          );
                        }
                      );

                      // Apply highlighting if needed
                      if (segment.isHighlighted) {
                        const highlightClass =
                          "ring rounded px-[0.25em] py-0.5";

                        if (isAdded || segment.isDiff) {
                          return (
                            <span class="ak-layer-mix-green-500/30 ak-edge-green-500/20 ring mx-[0.1em] rounded px-[0.25em] py-0.5">
                              {segmentElements}
                            </span>
                          );
                        }

                        if (segment.spansMultipleTokens) {
                          // Multi-token highlight
                          return (
                            <span
                              class:list={[
                                "ak-layer-pop ak-edge/25",
                                highlightClass,
                              ]}
                            >
                              {segmentElements}
                            </span>
                          );
                        }
                        // Single token highlight - use token colors for background
                        const firstFragment = segment.fragments[0];
                        invariant(firstFragment);
                        const style = firstFragment.token.htmlStyle as any;
                        const dark =
                          style?.["--shiki-dark"] || firstFragment.token.color;
                        const light = style?.color || firstFragment.token.color;

                        return (
                          <span
                            style={`--dark:${dark}; --light:${light}`}
                            class:list={[
                              "ak-text-(--dark)/50 ak-light:ak-text-(--light)/65 ak-layer-mix-(--ak-text)/10 ak-edge-(--ak-text)/20",
                              highlightClass,
                            ]}
                          >
                            {segmentElements}
                          </span>
                        );
                      }

                      return segmentElements;
                    });
                  }
                  return null;
                })}
              </div>
            );
          }

          if (lineInfo.renderType === "segments") {
            const { isEmpty, segments } = lineInfo;
            if (!segments) return null;
            return (
              <div
                data-highlight={highlightLine || undefined}
                class:list={[
                  "pe-14 [content-visibility:auto] h-(--line-height)",
                  lineClass,
                  isHighlighted(lineInfo.i) &&
                    !addedOrRemoved &&
                    "ak-layer-pop",
                  isCollapsed(lineInfo.i) && "in-data-collapsed:hidden",
                ]}
              >
                {isEmpty
                  ? "\n"
                  : segments.map((segment) => {
                      const segmentElements = segment.fragments.map(
                        ({ content, token }: TokenFragment) => {
                          // TODO: Fix this after we merge the site folder into root
                          const style = token.htmlStyle as any;
                          const dark = style?.["--shiki-dark"] || token.color;
                          const light = style?.color || token.color;
                          return (
                            <span
                              style={`--dark:${dark}; --light:${light}`}
                              class="ak-text-(--dark)/50 ak-light:ak-text-(--light)/65"
                            >
                              {content || ""}
                            </span>
                          );
                        }
                      );

                      // Apply highlighting if needed
                      if (segment.isHighlighted) {
                        const highlightClass =
                          "ring rounded px-[0.25em] py-0.5";

                        if (isAdded || segment.isDiff) {
                          return (
                            <span class="ak-layer-mix-green-500/30 ak-edge-green-500/20 ring mx-[0.1em] rounded px-[0.25em] py-0.5">
                              {segmentElements}
                            </span>
                          );
                        }

                        if (segment.spansMultipleTokens) {
                          // Multi-token highlight
                          return (
                            <span
                              class:list={[
                                "ak-layer-pop ak-edge/25",
                                highlightClass,
                              ]}
                            >
                              {segmentElements}
                            </span>
                          );
                        }
                        // Single token highlight - use token colors for background
                        const firstFragment = segment.fragments[0];
                        invariant(firstFragment);
                        const style = firstFragment.token.htmlStyle as any;
                        const dark =
                          style?.["--shiki-dark"] || firstFragment.token.color;
                        const light = style?.color || firstFragment.token.color;

                        return (
                          <span
                            style={`--dark:${dark}; --light:${light}`}
                            class:list={[
                              "ak-text-(--dark)/50 ak-light:ak-text-(--light)/65 ak-layer-mix-(--ak-text)/10 ak-edge-(--ak-text)/20",
                              highlightClass,
                            ]}
                          >
                            {segmentElements}
                          </span>
                        );
                      }

                      return segmentElements;
                    })}
              </div>
            );
          }
          return null;
        })
      }
    </code>
  </div>
</Fragment>
