---
/**
 * @license
 * Copyright 2025-present Ariakit FZ-LLC. All Rights Reserved.
 *
 * This software is proprietary. See the license.md file in the root of this
 * package for licensing terms.
 *
 * SPDX-License-Identifier: UNLICENSED
 */
import type { HTMLAttributes } from "astro/types";

interface Props extends HTMLAttributes<"div"> {
  threshold?: number;
}

const { threshold = 0, ...props } = Astro.props;
---

<div
  data-sticky-element
  data-threshold={threshold}
  class:list={["group sticky", props.class]}
  {...props}
>
  <slot />
</div>

<script>
  function initStickyElements() {
    const stickyElements = document.querySelectorAll("[data-sticky-element]");

    for (const stickyEl of stickyElements) {
      if (stickyEl.hasAttribute("data-sticky-initialized")) continue;
      stickyEl.setAttribute("data-sticky-initialized", "true");
      const threshold = stickyEl.getAttribute("data-threshold") || 0;

      const sentinel = document.createElement("div");
      sentinel.style.position = "absolute";
      sentinel.style.height = "1px";

      const stickyElStyle = getComputedStyle(stickyEl);
      const top = stickyElStyle.top;
      sentinel.style.top = `calc(${top} * -1 - 1px - ${threshold}px)`;

      const parent = stickyEl.parentElement;
      if (parent && getComputedStyle(parent).position === "static") {
        parent.style.position = "relative";
      }

      stickyEl.before(sentinel);

      const observer = new IntersectionObserver(
        ([entry]) => {
          const isStuck = !entry?.isIntersecting;
          stickyEl.toggleAttribute("data-stuck", isStuck);
          stickyEl.toggleAttribute("data-not-stuck", !isStuck);
        },
        { threshold: [0] }
      );

      observer.observe(sentinel);
    }
  }

  document.addEventListener("astro:page-load", initStickyElements);
</script>
