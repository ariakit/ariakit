---
import * as icons from "#app/icons/icons.ts";
import { isJsxFramework } from "#app/lib/frameworks.ts";
import { getLangFromFilename } from "#app/lib/shiki.ts";
import type { ComponentProps } from "astro/types";
import { decode } from "html-entities";
import parseNumericRange from "parse-numeric-range";
import CodeBlockTabs from "./code-block-tabs.astro";
import CodeBlock from "./code-block.astro";
import type { CodeBlockProps } from "./code-block.types.ts";

interface Props extends ComponentProps<typeof CodeBlockTabs> {}

const framework = Astro.locals.framework;

function getFilenameIcon(
  props: Pick<CodeBlockProps, "lang" | "filename" | "filenameIcon">
): keyof typeof icons | undefined {
  const { lang, filename, filenameIcon } = props;
  if (filenameIcon) return filenameIcon;
  if (lang && lang in icons) return lang as keyof typeof icons;
  if (filename && filename in icons) return filename as keyof typeof icons;
  const jsxFramework = isJsxFramework(framework) ? framework : "react";
  if (lang === "tsx") return jsxFramework;
  if (lang === "jsx") return jsxFramework;
  if (lang === "ts") return "ts";
  if (lang === "js") return "js";
  if (lang === "html") return "html";
  return undefined;
}

function parseLang(className?: string) {
  if (!className) return { filename: undefined, lang: undefined };
  const [, filename] = className.match(/language\-(.+)/) ?? [];
  const lang = getLangFromFilename(filename);
  const showFilename = filename !== lang;
  return {
    filename: showFilename ? filename : undefined,
    showFilename,
    lang,
    filenameIcon: getFilenameIcon({ lang, filename }),
  };
}

function splitRespectingQuotes(str: string): string[] {
  const props: string[] = [];
  let current = "";
  let inQuotes = false;
  let quoteChar = "";

  for (let i = 0; i < str.length; i++) {
    const char = str[i];

    if (!inQuotes && (char === '"' || char === "'")) {
      inQuotes = true;
      quoteChar = char;
      current += char;
    } else if (inQuotes && char === quoteChar) {
      inQuotes = false;
      quoteChar = "";
      current += char;
    } else if (!inQuotes && char === " ") {
      if (current.trim()) {
        props.push(current.trim());
        current = "";
      }
    } else {
      current += char;
    }
  }

  if (current.trim()) {
    props.push(current.trim());
  }

  return props;
}

function parseMetaString(metaString?: string) {
  if (!metaString) return {};
  const decodedMetaString = decode(metaString);
  const props = splitRespectingQuotes(decodedMetaString);
  const lineNumbers = props.includes("lineNumbers");
  const maxLines = decodedMetaString.match(/maxLines=(\d+)/)?.[1];
  const rangePattern = /^\{([\d\-,]+)\}$/;

  const highlightLines = props
    .filter((item) => rangePattern.test(item))
    .flatMap((item) => parseNumericRange(item.replace(rangePattern, "$1")));

  const tokenPattern = /^["'](.+)["']([\d\-,]+)?$/;

  const highlightTokens = props
    .filter((item) => tokenPattern.test(item))
    .map((item) => {
      const [, token, ranges] = item.match(tokenPattern) || [];
      if (!ranges) return token;
      return [token, ...parseNumericRange(ranges)] as const;
    });

  return {
    lineNumbers,
    maxLines: maxLines ? Number.parseInt(maxLines) : undefined,
    highlightLines,
    highlightTokens,
  };
}

function parseCodeBlock(html: string): CodeBlockProps {
  const codeMatch = html.match(
    /^<code((?:[^>"]|"[^"]*")*)>([\s\S]*?)<\/code>$/
  );
  if (!codeMatch) {
    return { code: html };
  }
  const [, attributes, encodedContent] = codeMatch;
  const className = attributes.match(/class="([^"]*)"/)?.[1];
  const langInfo = parseLang(className);
  const metaString = attributes.match(/metastring="([^"]*)"/)?.[1];
  const previousCode = attributes.match(/previousCode="([^"]*)"/)?.[1];
  return {
    code: decode(encodedContent).trim(),
    previousCode: previousCode ? atob(previousCode) : undefined,
    ...langInfo,
    ...parseMetaString(metaString),
  };
}

const { tabs } = Astro.props;

const hasProps = Object.keys(Astro.props).length > 0;
const codeBlockProps = !hasProps
  ? parseCodeBlock(await Astro.slots.render("default"))
  : null;

// Automatically set the filename icon for each tab
if (tabs?.length) {
  for (const tab of tabs) {
    tab.filenameIcon = getFilenameIcon(tab);
    tab.lang = tab.lang ?? getLangFromFilename(tab.filename);
  }
}
---

<div
  class:list={[
    "ak-container-size-[calc(min(theme(--container-content),100%)+--spacing(8))]/0",
    "not-in-data-admonition:ak-container",
    "in-data-admonition:not-first:pt-0",
    "in-data-admonition:ak-frame-cover/1",
  ]}
>
  {
    codeBlockProps ? (
      <CodeBlock {...codeBlockProps} />
    ) : (
      <CodeBlockTabs {...Astro.props} />
    )
  }
</div>
