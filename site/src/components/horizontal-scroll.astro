---
/**
 * @license
 * Copyright 2025-present Ariakit FZ-LLC. All Rights Reserved.
 *
 * This software is proprietary. See the license.md file in the root of this
 * package for licensing terms.
 *
 * SPDX-License-Identifier: UNLICENSED
 */
import type { HTMLAttributes } from "astro/types";
import HorizontalScrollButton from "./horizontal-scroll-button.astro";

interface Props extends HTMLAttributes<"div"> {
  scrollAmount?: number;
}

const { scrollAmount = 0.5, ...props } = Astro.props;
---

<div
  data-horizontal-scroll
  data-scroll-amount={scrollAmount}
  class:list={["group relative", props.class]}
  {...props}
>
  <HorizontalScrollButton
    data-scroll-button="left"
    direction="left"
    class="@3xl:hidden @3xl:group-data-[scroll-start=false]:flex"
  />

  <div
    data-scroll-container
    class="[scrollbar-width:none] overflow-x-auto overscroll-x-contain"
  >
    <slot />
  </div>

  <HorizontalScrollButton
    data-scroll-button="right"
    direction="right"
    class="@3xl:hidden @3xl:group-data-[scroll-end=false]:flex"
  />
</div>

<script>
  function setupHorizontalScroll(container: HTMLElement) {
    const scrollingElement = container.querySelector("[data-scroll-container]");
    if (!scrollingElement) return;

    const updateButtons = () => {
      const { scrollLeft, scrollWidth, clientWidth } = scrollingElement;
      const isAtStart = scrollLeft < 1;
      const isAtEnd = scrollLeft + clientWidth >= scrollWidth - 1;
      container.dataset.scrollStart = String(isAtStart);
      container.dataset.scrollEnd = String(isAtEnd);
    };

    const scroll = (direction: "left" | "right") => {
      const { clientWidth } = scrollingElement;
      const scrollAmount = parseFloat(container.dataset.scrollAmount ?? "0.5");
      const amount = clientWidth * scrollAmount;
      const scrollValue = direction === "left" ? -amount : amount;
      scrollingElement.scrollBy({ left: scrollValue, behavior: "smooth" });
    };

    container
      .querySelector('[data-scroll-button="left"]')
      ?.addEventListener("click", () => scroll("left"));
    container
      .querySelector('[data-scroll-button="right"]')
      ?.addEventListener("click", () => scroll("right"));

    scrollingElement.addEventListener("scroll", updateButtons, {
      passive: true,
    });

    const observer = new ResizeObserver(updateButtons);
    observer.observe(scrollingElement);

    const childObserver = new MutationObserver(updateButtons);
    childObserver.observe(scrollingElement, { childList: true, subtree: true });

    updateButtons();
  }

  document.addEventListener("astro:page-load", () => {
    document
      .querySelectorAll<HTMLElement>("[data-horizontal-scroll]")
      .forEach(setupHorizontalScroll);
  });
</script>
