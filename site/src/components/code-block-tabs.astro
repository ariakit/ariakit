---
/**
 * @license
 * Copyright 2025-present Ariakit FZ-LLC. All Rights Reserved.
 *
 * This software is proprietary. See the license.md file in the root of this
 * package for licensing terms.
 *
 * SPDX-License-Identifier: UNLICENSED
 */
import * as icons from "#app/icons/icons.ts";
import type { Framework } from "#app/lib/schemas.ts";
import { getLangFromFilename } from "#app/lib/shiki.ts";
import { importThumbnail } from "#app/lib/thumbnail.ts";
import type { Source } from "#app/lib/types.ts";
import type { ComponentProps } from "astro/types";
import { getEntry } from "astro:content";
import CodeBlockContent from "./code-block-content.astro";
import { CodeBlockTabs as CodeBlockTabsReact } from "./code-block.react.tsx";
import type { CodeBlockTabProps } from "./code-block.types";

interface Props
  extends Omit<ComponentProps<typeof CodeBlockTabsReact>, "source"> {
  source?: Source | Record<Framework, Source>;
  span?: boolean;
}

const {
  source: sourceProp,
  tabs: tabsProp,
  lineNumbers = !!sourceProp,
  maxLines = 17,
  framework = Astro.locals.framework,
  example: exampleProp,
  wide = false,
  span = !!wide,
  ...props
} = Astro.props;

function hasIcon(name: string): name is keyof typeof icons {
  return name in icons;
}

function isTsxFramework(
  framework: string
): framework is "react" | "solid" | "preact" {
  return ["react", "solid", "preact"].includes(framework);
}

function getSource(source: typeof sourceProp) {
  if (!source) return;
  if ("files" in source) return source;
  if (!framework) return null;
  return source[framework] || null;
}

async function getVariantTitle(source?: Source) {
  if (!source) return;
  const preview = await getEntry("previews", source.name);
  return preview?.data.title;
}

const source = getSource(sourceProp);

// The source prop is available for multiple frameworks, but it doesn't include
// the current one.
if (source === null) {
  return null;
}

const tabsFromSource = source
  ? Object.entries(source.files).map(([filename, code]) => {
      const lang = getLangFromFilename(filename);
      const filenameIcon =
        lang === "tsx" && framework && isTsxFramework(framework)
          ? framework
          : hasIcon(lang)
            ? lang
            : undefined;
      return {
        code,
        filename,
        filenameIcon,
      } satisfies CodeBlockTabProps;
    })
  : [];

const tabs = tabsProp || tabsFromSource;
const example = exampleProp ?? source?.name;
const isMainPreview =
  !source?.name.includes("/") || source.name.includes("_component");
const title = await getVariantTitle(source);

const Fallback = example ? await importThumbnail(example) : undefined;
---

<div class:list={["h-full", span ? "col-span-full" : ""]}>
  <div
    class="grid gap-4 content-start sticky top-[calc(var(--header-height)+--spacing(4))]"
  >
    {
      title && !isMainPreview && (
        <div class="ak-text/60 font-medium text-center">{title}</div>
      )
    }
    <CodeBlockTabsReact
      wide={wide}
      title={title}
      client:visible={{ rootMargin: "50%" }}
      hasFallback={!!Fallback}
      iframe={!Astro.slots.has("default")}
      tabs={tabs}
      source={source}
      maxLines={maxLines}
      framework={framework}
      example={example}
      {...props}
      preview={!!source}
    >
      <slot />
      {Fallback && <Fallback slot="fallback0" />}
      {Fallback && <Fallback slot="fallback1" />}
      {tabs[0] && <CodeBlockContent slot="slot0" {lineNumbers} {...tabs[0]} />}
      {tabs[1] && <CodeBlockContent slot="slot1" {lineNumbers} {...tabs[1]} />}
      {tabs[2] && <CodeBlockContent slot="slot2" {lineNumbers} {...tabs[2]} />}
      {tabs[3] && <CodeBlockContent slot="slot3" {lineNumbers} {...tabs[3]} />}
      {tabs[4] && <CodeBlockContent slot="slot4" {lineNumbers} {...tabs[4]} />}
      {tabs[5] && <CodeBlockContent slot="slot5" {lineNumbers} {...tabs[5]} />}
      {tabs[6] && <CodeBlockContent slot="slot6" {lineNumbers} {...tabs[6]} />}
      {tabs[7] && <CodeBlockContent slot="slot7" {lineNumbers} {...tabs[7]} />}
    </CodeBlockTabsReact>
  </div>
</div>
