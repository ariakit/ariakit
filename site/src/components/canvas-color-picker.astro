---
const id = Math.random().toString(36).substring(2, 15);
---

<style>
  @reference "../styles/global.css";

  .test,
  .test2 {
    appearance: none;
    overscroll-behavior: contain;

    &::-webkit-slider-thumb {
      appearance: none;
      @apply ak-layer-hover-vivid ak-edge/90 size-8 rounded-full border;
    }
  }
  .test {
    background: linear-gradient(
      in oklab to right,
      oklch(0 0.05 var(--hue, 0)),
      oklch(1 0.05 var(--hue, 0))
    );
  }
  .test2 {
    background: linear-gradient(
      in oklab to right,
      oklch(clamp(0.15, var(--lightness, 0.15), 0.85) 0.1 0),
      oklch(clamp(0.15, var(--lightness, 0.15), 0.85) 0.1 60),
      oklch(clamp(0.15, var(--lightness, 0.15), 0.85) 0.1 120),
      oklch(clamp(0.15, var(--lightness, 0.15), 0.85) 0.1 180),
      oklch(clamp(0.15, var(--lightness, 0.15), 0.85) 0.1 240),
      oklch(clamp(0.15, var(--lightness, 0.15), 0.85) 0.1 360)
    );
  }
</style>

<input
  data-lightness
  id={`${id}-lightness`}
  type="range"
  min="0"
  max="1"
  step="0.01"
  value="0.15"
  class="test h-10 w-100 ak-layer ak-edge/20 ak-frame-container ring"
/>

<input
  data-hue
  id={`${id}-hue`}
  type="range"
  min="0"
  max="360"
  step="1"
  value="0"
  class="test2 h-10 w-100 ak-layer ak-edge/20 ak-frame-container ring"
/>

<script is:inline define:vars={{ id }}>
  const style = document.body.style;
  let lightness = style.getPropertyValue("--lightness");
  let chroma = style.getPropertyValue("--chroma");
  let hue = style.getPropertyValue("--hue");

  if (!lightness || !hue) {
    const temp = document.createElement("div");
    temp.style.display = "none";
    temp.style.color = "oklch(from var(--color-canvas) l c h)";
    document.body.appendChild(temp);
    const { color } = getComputedStyle(temp);
    const match = color.match(/oklch\(([\d.]+)\s+([\d.]+)\s+([\d.]+)\)/);
    document.body.removeChild(temp);

    [, lightness = "0.15", chroma = "0.01", hue = "0"] = match || [];
    style.setProperty("--lightness", lightness);
    style.setProperty("--chroma", chroma);
    style.setProperty("--hue", hue);
  }

  const lightnessInput = document.getElementById(`${id}-lightness`);
  const hueInput = document.getElementById(`${id}-hue`);
  if (lightnessInput) {
    lightnessInput.value = lightness;
  }
  if (hueInput) {
    hueInput.value = hue;
  }
</script>

<script>
  import { onIdle } from "../lib/on-idle";

  const lightnessInputs =
    document.querySelectorAll<HTMLInputElement>("[data-lightness]");
  const hueInputs = document.querySelectorAll<HTMLInputElement>("[data-hue]");

  let cancelIdle = () => {};

  function setProperty(property: string, value: string) {
    document.body.style.setProperty(property, value);
    if (property === "--lightness" || property === "--hue") {
      document.body.style.setProperty(
        "--color-canvas",
        `oklch(var(--lightness, 0.15) var(--chroma, 0.01) var(--hue, 0))`
      );
    }
  }

  lightnessInputs.forEach((input) => {
    input.addEventListener("change", () => {
      cancelIdle();
      cancelIdle = onIdle(() => {
        setProperty("--lightness", input.value);
      });
    });
  });

  hueInputs.forEach((input) => {
    input.addEventListener("change", () => {
      cancelIdle();
      cancelIdle = onIdle(() => {
        setProperty("--hue", input.value);
      });
    });
  });
</script>
