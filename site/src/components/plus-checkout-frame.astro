---
import { createCheckout, getPlusPrice } from "#app/lib/stripe.ts";
import { getPlusCheckoutPath } from "#app/lib/url.ts";
import type { PlusType } from "#app/lib/schemas.ts";
import { createLogger } from "#app/lib/logger.ts";
export const prerender = false;

interface Props {
  type: PlusType;
  url: string;
}

const { type } = Astro.props;
const price = await getPlusPrice({ context: Astro, type });

const logger = createLogger("plus-checkout-frame");

if (!price) {
  logger.error("Price not found");
  return null;
}

const session = await createCheckout({
  price,
  context: Astro,
  redirectUrl: new URL(
    getPlusCheckoutPath({
      url: Astro.props.url,
      step: Astro.props.type === "team" ? "team" : "success",
    }),
    Astro.url.origin
  ),
});

if (!session) {
  throw new Error("Session not found");
}
---

<div id="checkout" data-client-secret={session.client_secret} class="w-full">
</div>

<script>
  import { loadStripe } from "@stripe/stripe-js";
  const checkoutDiv = document.querySelector<HTMLElement>("#checkout");
  const { clientSecret } = checkoutDiv?.dataset || {};
  const stripe = await loadStripe(
    import.meta.env.PUBLIC_STRIPE_PUBLISHABLE_KEY!
  );
  const checkout = await stripe?.initEmbeddedCheckout({ clientSecret });
  checkout?.mount(checkoutDiv!);
</script>
