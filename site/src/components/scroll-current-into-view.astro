---
/**
 * @license
 * Copyright 2025-present Ariakit FZ-LLC. All Rights Reserved.
 *
 * This software is proprietary. See the license.md file in the root of this
 * package for licensing terms.
 *
 * SPDX-License-Identifier: UNLICENSED
 */
import PreserveScroll from "#app/components/preserve-scroll.astro";

export interface Props {
  /**
   * A CSS selector for the element that wraps the links.
   */
  selector: string;
  /**
   * The selector used to find the current element inside the container.
   * Defaults to '[aria-current="page"]'.
   */
  currentSelector?: string;
  /**
   * Scroll behavior. Defaults to 'instant' to match current site behavior.
   */
  behavior?: "auto" | "smooth" | "instant";
  /**
   * Inline alignment. Defaults to 'nearest'.
   */
  inline?: "start" | "center" | "end" | "nearest";
  /**
   * Block alignment. Defaults to 'nearest'.
   */
  block?: "start" | "center" | "end" | "nearest";
}

const {
  selector,
  currentSelector = '[aria-current="page"]',
  behavior = "instant",
  inline = "nearest",
  block = "nearest",
} = Astro.props;
---

<PreserveScroll selector={selector} />

<script
  is:inline
  define:vars={{ selector, currentSelector, behavior, inline, block }}
>
  function isElementInViewport(element) {
    const rect = element.getBoundingClientRect();
    const viewportWidth =
      window.innerWidth || document.documentElement.clientWidth;
    const viewportHeight =
      window.innerHeight || document.documentElement.clientHeight;
    const horizontallyVisible = rect.left < viewportWidth && rect.right > 0;
    const verticallyVisible = rect.top < viewportHeight && rect.bottom > 0;
    return horizontallyVisible && verticallyVisible;
  }

  function scroll() {
    const root = document.querySelector(selector);
    if (!root) return;
    if (!isElementInViewport(root)) return;
    const current = root.querySelector(currentSelector);
    current?.scrollIntoView({ behavior, inline, block });
  }

  document.addEventListener("astro:page-load", scroll);
  scroll();
</script>
