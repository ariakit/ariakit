---
/**
 * @license
 * Copyright 2025-present Ariakit FZ-LLC. All Rights Reserved.
 *
 * This software is proprietary. See the license.md file in the root of this
 * package for licensing terms.
 *
 * SPDX-License-Identifier: UNLICENSED
 */
import type { Framework, ReferenceProp } from "#app/lib/schemas.ts";
import { getEntry } from "astro:content";
import { encode } from "html-entities";
import pluralize from "pluralize";
import ApiReferencePropType from "./api-reference-prop-type.astro";
import ContentAdmonition from "./content-admonition.astro";
import ContentCodeBlock from "./content-code-block.astro";
import { ContentDisclosure } from "./content-disclosure.react.tsx";
import ContentHeading from "./content-heading.astro";
import ContentLink from "./content-link.astro";
import Markdown from "./markdown.astro";
import PageCardExample from "./page-card-example.astro";

interface Props extends ReferenceProp {
  prefix?: string;
  framework?: Framework;
}

const {
  prefix,
  name,
  type,
  description,
  deprecated,
  defaultValue,
  examples,
  liveExamples,
  // framework = Astro.props.framework,
} = Astro.props;

const id = `${prefix}-${name}`;

function getCodeBlockCode(example: ReferenceProp["examples"][number]) {
  return `<code class="language-${example.language}"${example.meta ? ` metastring="${encode(example.meta)}"` : ""}>${example.code}</code>`;
}

const ex = await getEntry("examples", "checkbox-card");
---

<ContentHeading
  as="div"
  id={id}
  class="flex gap-2 items-center mb-0 ak-heading @max-3xl:flex-col @max-3xl:items-start"
>
  <h5 class:list={["text-xl! m-0", deprecated && "line-through decoration-1"]}>
    <ContentLink href={`#${id}`}><code>{name}</code></ContentLink>
  </h5>
  <div class="flex gap-[inherit] max-w-full flex-shrink min-w-0">
    <ApiReferencePropType
      class="flex-shrink"
      code={type}
      grammarContextCode="const type: "
    />
    {
      defaultValue && (
        <ApiReferencePropType
          class="flex-none"
          code={`= ${defaultValue}`}
          grammarContextCode="const defaultValue"
        />
      )
    }
  </div>
</ContentHeading>
{
  deprecated && (
    <ContentAdmonition type="warning" title="Deprecated">
      {typeof deprecated === "string" ? <Markdown content={deprecated} /> : ""}
    </ContentAdmonition>
  )
}
{
  !!liveExamples.length && ex && (
    <ContentDisclosure
      client:load
      label={`${liveExamples.length} ${pluralize("example", liveExamples.length)}`}
      className="-mb-(--ak-frame-padding) -mt-[calc(var(--ak-frame-padding)/2)]"
    >
      <div
        class:list={[
          "grid grid-cols-[repeat(auto-fill,minmax(14rem,1fr))] gap-4 ak-container",
        ]}
      >
        {liveExamples.map(() => (
          <PageCardExample entry={ex} />
        ))}
      </div>
    </ContentDisclosure>
  )
}
<Markdown content={description} />
{
  examples.map((example) => (
    <Fragment>
      {example.description && <Markdown content={example.description} />}
      <ContentCodeBlock set:html={getCodeBlockCode(example)} />
    </Fragment>
  ))
}
